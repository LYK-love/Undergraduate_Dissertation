from Project.code.CommentSimilarity.SentenceCloneType import SentenceCloneType
from Project.code.CommentSimilarity.lexical_similarity import detect_lexical_clones
from Project.code.CommentSimilarity.semantic_similarity import detect_semantic_clones
from Project.code.CommentSimilarity.syntactic_similarity import detect_syntactic_clones
from Project.code.CommentSimilarity.textual_similarity import detect_textual_clones

'''
{"idx": 1, "sample_id": 5243791, "full_name": "sleuthkit/autopsy", "commit_id": "6130def6fda2188dcbf619612a7a1083385e233c", "src_method": "public static void writeCaseNodeData(CaseNodeData nodeData) throws CaseNodeDataException, InterruptedException {\n        try {\n            CoordinationService coordinationService = CoordinationService.getInstance();\n            coordinationService.setNodeData(CoordinationService.CategoryNode.CASES, nodeData.getDirectory().toString(), nodeData.toArray());\n        } catch (IOException | CoordinationServiceException ex) {\n            throw new CaseNodeDataException(String.format(\"Failed to write case node data to %s\", nodeData.getDirectory().toString().toUpperCase()), ex); //NON-NLS\n        }\n    }", "dst_method": "public static void writeCaseNodeData(CaseNodeData nodeData) throws CaseNodeDataException, InterruptedException {\n        try {\n            CoordinationService.getInstance().setNodeData(CoordinationService.CategoryNode.CASES, nodeData.getDirectory().toString(), nodeData.toArray());\n            \n        } catch (IOException | CoordinationServiceException ex) {\n            throw new CaseNodeDataException(String.format(\"Failed to write case node data to %s\", nodeData.getDirectory().toString().toUpperCase()), ex); //NON-NLS\n        }\n    }", "src_desc": "Obtain the case data to be updated by calling createCaseNodeData() or\nreadCaseNodeData().", "dst_desc": "Obtain\nthe case data to be updated and written by calling createCaseNodeData()\nor readCaseNodeData().", "code_change_seq": [["public", "public", "equal"], ["static", "static", "equal"], ["void", "void", "equal"], ["write", "write", "equal"], ["<con>", "<con>", "equal"], ["Case", "Case", "equal"], ["<con>", "<con>", "equal"], ["Node", "Node", "equal"], ["<con>", "<con>", "equal"], ["Data", "Data", "equal"], ["(", "(", "equal"], ["Case", "Case", "equal"], ["<con>", "<con>", "equal"], ["Node", "Node", "equal"], ["<con>", "<con>", "equal"], ["Data", "Data", "equal"], ["node", "node", "equal"], ["<con>", "<con>", "equal"], ["Data", "Data", "equal"], [")", ")", "equal"], ["throws", "throws", "equal"], ["Case", "Case", "equal"], ["<con>", "<con>", "equal"], ["Node", "Node", "equal"], ["<con>", "<con>", "equal"], ["Data", "Data", "equal"], ["<con>", "<con>", "equal"], ["Exception", "Exception", "equal"], [",", ",", "equal"], ["Interrupted", "Interrupted", "equal"], ["<con>", "<con>", "equal"], ["Exception", "Exception", "equal"], ["{", "{", "equal"], ["try", "try", "equal"], ["{", "{", "equal"], ["Coordination", "Coordination", "equal"], ["<con>", "<con>", "equal"], ["Service", "Service", "equal"], ["coordination", "", "delete"], ["<con>", "", "delete"], ["Service", "", "delete"], ["=", "", "delete"], ["Coordination", "", "delete"], ["<con>", "", "delete"], ["Service", "", "delete"], [".", ".", "equal"], ["get", "get", "equal"], ["<con>", "<con>", "equal"], ["Instance", "Instance", "equal"], ["(", "(", "equal"], [")", ")", "equal"], [";", "", "delete"], ["coordination", "", "delete"], ["<con>", "", "delete"], ["Service", "", "delete"], [".", ".", "equal"], ["set", "set", "equal"], ["<con>", "<con>", "equal"], ["Node", "Node", "equal"], ["<con>", "<con>", "equal"], ["Data", "Data", "equal"], ["(", "(", "equal"], ["Coordination", "Coordination", "equal"], ["<con>", "<con>", "equal"], ["Service", "Service", "equal"], [".", ".", "equal"], ["Category", "Category", "equal"], ["<con>", "<con>", "equal"], ["Node", "Node", "equal"], [".", ".", "equal"], ["CASES", "CASES", "equal"], [",", ",", "equal"], ["node", "node", "equal"], ["<con>", "<con>", "equal"], ["Data", "Data", "equal"], [".", ".", "equal"], ["get", "get", "equal"], ["<con>", "<con>", "equal"], ["Directory", "Directory", "equal"], ["(", "(", "equal"], [")", ")", "equal"], [".", ".", "equal"], ["to", "to", "equal"], ["<con>", "<con>", "equal"], ["String", "String", "equal"], ["(", "(", "equal"], [")", ")", "equal"], [",", ",", "equal"], ["node", "node", "equal"], ["<con>", "<con>", "equal"], ["Data", "Data", "equal"], [".", ".", "equal"], ["to", "to", "equal"], ["<con>", "<con>", "equal"], ["Array", "Array", "equal"], ["(", "(", "equal"], [")", ")", "equal"], [")", ")", "equal"], [";", ";", "equal"], ["}", "}", "equal"], ["catch", "catch", "equal"], ["(", "(", "equal"], ["IO", "IO", "equal"], ["<con>", "<con>", "equal"], ["Exception", "Exception", "equal"], ["|", "|", "equal"], ["Coordination", "Coordination", "equal"], ["<con>", "<con>", "equal"], ["Service", "Service", "equal"], ["<con>", "<con>", "equal"], ["Exception", "Exception", "equal"], ["ex", "ex", "equal"], [")", ")", "equal"], ["{", "{", "equal"], ["throw", "throw", "equal"], ["new", "new", "equal"], ["Case", "Case", "equal"], ["<con>", "<con>", "equal"], ["Node", "Node", "equal"], ["<con>", "<con>", "equal"], ["Data", "Data", "equal"], ["<con>", "<con>", "equal"], ["Exception", "Exception", "equal"], ["(", "(", "equal"], ["String", "String", "equal"], [".", ".", "equal"], ["format", "format", "equal"], ["(", "(", "equal"], ["\"", "\"", "equal"], ["Failed", "Failed", "equal"], ["to", "to", "equal"], ["write", "write", "equal"], ["case", "case", "equal"], ["node", "node", "equal"], ["data", "data", "equal"], ["to", "to", "equal"], ["%", "%", "equal"], ["<con>", "<con>", "equal"], ["s", "s", "equal"], ["\"", "\"", "equal"], [",", ",", "equal"], ["node", "node", "equal"], ["<con>", "<con>", "equal"], ["Data", "Data", "equal"], [".", ".", "equal"], ["get", "get", "equal"], ["<con>", "<con>", "equal"], ["Directory", "Directory", "equal"], ["(", "(", "equal"], [")", ")", "equal"], [".", ".", "equal"], ["to", "to", "equal"], ["<con>", "<con>", "equal"], ["String", "String", "equal"], ["(", "(", "equal"], [")", ")", "equal"], [".", ".", "equal"], ["to", "to", "equal"], ["<con>", "<con>", "equal"], ["Upper", "Upper", "equal"], ["<con>", "<con>", "equal"], ["Case", "Case", "equal"], ["(", "(", "equal"], [")", ")", "equal"], [")", ")", "equal"], [",", ",", "equal"], ["ex", "ex", "equal"], [")", ")", "equal"], [";", ";", "equal"], ["}", "}", "equal"], ["}", "}", "equal"]], "src_desc_tokens": ["Obtain", "the", "case", "data", "to", "be", "updated", "by", "calling", "create", "<con>", "Case", "<con>", "Node", "<con>", "Data", "<con>", "(", "<con>", ")", "or", "read", "<con>", "Case", "<con>", "Node", "<con>", "Data", "<con>", "(", "<con>", ")", "<con>", "."], "dst_desc_tokens": ["Obtain", "the", "case", "data", "to", "be", "updated", "and", "written", "by", "calling", "create", "<con>", "Case", "<con>", "Node", "<con>", "Data", "<con>", "(", "<con>", ")", "or", "read", "<con>", "Case", "<con>", "Node", "<con>", "Data", "<con>", "(", "<con>", ")", "<con>", "."], "label": true}
{"idx": 0, "sample_id": 4132758, "full_name": "apache/tomcat", "commit_id": "f6bb87109e2bd0660ba90a9bab9350b463a2a827", "src_method": "protected PStmtKeyCPDS createKey(final String sql) {\n        return new PStmtKeyCPDS(normalizeSQL(sql));\n    }", "dst_method": "protected PStmtKey createKey(final String sql) {\n        return new PStmtKey(normalizeSQL(sql), getCatalogOrNull());\n    }", "src_desc": "Create a {@link PStmtKeyCPDS} for the given arguments.", "dst_desc": "Creates a {@link PooledConnectionImpl.PStmtKey} for the given arguments.", "code_change_seq": [["protected", "protected", "equal"], ["P", "P", "equal"], ["<con>", "<con>", "equal"], ["Stmt", "Stmt", "equal"], ["<con>", "<con>", "equal"], ["Key", "Key", "equal"], ["<con>", "", "delete"], ["CPDS", "", "delete"], ["create", "create", "equal"], ["<con>", "<con>", "equal"], ["Key", "Key", "equal"], ["(", "(", "equal"], ["final", "final", "equal"], ["String", "String", "equal"], ["sql", "sql", "equal"], [")", ")", "equal"], ["{", "{", "equal"], ["return", "return", "equal"], ["new", "new", "equal"], ["P", "P", "equal"], ["<con>", "<con>", "equal"], ["Stmt", "Stmt", "equal"], ["<con>", "<con>", "equal"], ["Key", "Key", "equal"], ["<con>", "", "delete"], ["CPDS", "", "delete"], ["(", "(", "equal"], ["normalize", "normalize", "equal"], ["<con>", "<con>", "equal"], ["SQL", "SQL", "equal"], ["(", "(", "equal"], ["sql", "sql", "equal"], [")", ")", "equal"], ["", ",", "insert"], ["", "get", "insert"], ["", "<con>", "insert"], ["", "Catalog", "insert"], ["", "<con>", "insert"], ["", "Or", "insert"], ["", "<con>", "insert"], ["", "Null", "insert"], ["", "(", "insert"], ["", ")", "insert"], [")", ")", "equal"], [";", ";", "equal"], ["}", "}", "equal"]], "src_desc_tokens": ["Create", "a", "{", "<con>", "@", "<con>", "link", "P", "<con>", "Stmt", "<con>", "Key", "<con>", "CPDS", "<con>", "}", "for", "the", "given", "arguments", "<con>", "."], "dst_desc_tokens": ["Creates", "a", "{", "<con>", "@", "<con>", "link", "Pooled", "<con>", "Connection", "<con>", "Impl", "<con>", ".", "<con>", "P", "<con>", "Stmt", "<con>", "Key", "<con>", "}", "for", "the", "given", "arguments", "<con>", "."], "label": true}
{"idx": 0, "sample_id": 4479131, "full_name": "Azure/azure-sdk-for-java", "commit_id": "22ad65dc720849293c3388eece887062089d9c9f", "src_method": "public void forceCloseHandlesAsync() {\n        DirectoryAsyncClient directoryAsyncClient = createAsyncClientWithSASToken();\n        // BEGIN: com.azure.storage.file.directoryAsyncClient.forceCloseHandles\n        directoryAsyncClient.listHandles(10, true)\n            .subscribe(handleItem -> directoryAsyncClient.forceCloseHandles(handleItem.getHandleId(), true)\n                .subscribe(numOfClosedHandles -> System.out.printf(\"Closed %d handles.\", numOfClosedHandles)));\n        // END: com.azure.storage.file.directoryAsyncClient.forceCloseHandles\n    }", "dst_method": "public void forceCloseAllHandles() {\n        DirectoryAsyncClient directoryAsyncClient = createAsyncClientWithConnectionString();\n        // BEGIN: com.azure.storage.file.DirectoryAsyncClient.forceCloseAllHandles#boolean\n        directoryAsyncClient.forceCloseAllHandles(true).subscribe(numberOfHandlesClosed ->\n            System.out.printf(\"Closed %d open handles on the directory%n\", numberOfHandlesClosed));\n        // END: com.azure.storage.file.DirectoryAsyncClient.forceCloseAllHandles#boolean\n    }", "src_desc": "Generates a code sample for using {@link DirectoryAsyncClient#forceCloseHandles(String, boolean)}", "dst_desc": "code snippet for {@link DirectoryAsyncClient#forceCloseAllHandles(boolean)}.", "code_change_seq": [["public", "public", "equal"], ["void", "void", "equal"], ["force", "force", "equal"], ["<con>", "<con>", "equal"], ["Close", "Close", "equal"], ["<con>", "<con>", "equal"], ["", "All", "insert"], ["", "<con>", "insert"], ["Handles", "Handles", "equal"], ["<con>", "", "delete"], ["Async", "", "delete"], ["(", "(", "equal"], [")", ")", "equal"], ["{", "{", "equal"], ["Directory", "Directory", "equal"], ["<con>", "<con>", "equal"], ["Async", "Async", "equal"], ["<con>", "<con>", "equal"], ["Client", "Client", "equal"], ["directory", "directory", "equal"], ["<con>", "<con>", "equal"], ["Async", "Async", "equal"], ["<con>", "<con>", "equal"], ["Client", "Client", "equal"], ["=", "=", "equal"], ["create", "create", "equal"], ["<con>", "<con>", "equal"], ["Async", "Async", "equal"], ["<con>", "<con>", "equal"], ["Client", "Client", "equal"], ["<con>", "<con>", "equal"], ["With", "With", "equal"], ["<con>", "<con>", "equal"], ["SAS", "Connection", "replace"], ["<con>", "<con>", "equal"], ["Token", "String", "replace"], ["(", "(", "equal"], [")", ")", "equal"], [";", ";", "equal"], ["directory", "directory", "equal"], ["<con>", "<con>", "equal"], ["Async", "Async", "equal"], ["<con>", "<con>", "equal"], ["Client", "Client", "equal"], [".", ".", "equal"], ["", "force", "insert"], ["", "<con>", "insert"], ["", "Close", "insert"], ["", "<con>", "insert"], ["list", "All", "replace"], ["<con>", "<con>", "equal"], ["Handles", "Handles", "equal"], ["(", "(", "equal"], ["10", "", "delete"], [",", "", "delete"], ["true", "true", "equal"], [")", ")", "equal"], [".", ".", "equal"], ["subscribe", "subscribe", "equal"], ["(", "(", "equal"], ["handle", "", "delete"], ["<con>", "", "delete"], ["Item", "", "delete"], ["->", "", "delete"], ["directory", "", "delete"], ["<con>", "", "delete"], ["Async", "", "delete"], ["<con>", "", "delete"], ["Client", "", "delete"], [".", "", "delete"], ["force", "", "delete"], ["<con>", "", "delete"], ["Close", "", "delete"], ["<con>", "", "delete"], ["Handles", "", "delete"], ["(", "", "delete"], ["handle", "", "delete"], ["<con>", "", "delete"], ["Item", "", "delete"], [".", "", "delete"], ["get", "", "delete"], ["<con>", "", "delete"], ["Handle", "", "delete"], ["<con>", "", "delete"], ["Id", "", "delete"], ["(", "", "delete"], [")", "", "delete"], [",", "", "delete"], ["true", "", "delete"], [")", "", "delete"], [".", "", "delete"], ["subscribe", "", "delete"], ["(", "", "delete"], ["num", "number", "replace"], ["<con>", "<con>", "equal"], ["Of", "Of", "equal"], ["<con>", "<con>", "equal"], ["", "Handles", "insert"], ["", "<con>", "insert"], ["Closed", "Closed", "equal"], ["<con>", "", "delete"], ["Handles", "", "delete"], ["->", "->", "equal"], ["System", "System", "equal"], [".", ".", "equal"], ["out", "out", "equal"], [".", ".", "equal"], ["printf", "printf", "equal"], ["(", "(", "equal"], ["\"", "\"", "equal"], ["Closed", "Closed", "equal"], ["%", "%", "equal"], ["<con>", "<con>", "equal"], ["d", "d", "equal"], ["", "open", "insert"], ["handles", "handles", "equal"], ["", "on", "insert"], ["", "the", "insert"], ["", "directory", "insert"], ["<con>", "<con>", "equal"], [".", "%", "replace"], ["", "<con>", "insert"], ["", "n", "insert"], ["\"", "\"", "equal"], [",", ",", "equal"], ["num", "number", "replace"], ["<con>", "<con>", "equal"], ["Of", "Of", "equal"], ["<con>", "<con>", "equal"], ["", "Handles", "insert"], ["", "<con>", "insert"], ["Closed", "Closed", "equal"], ["<con>", "", "delete"], ["Handles", "", "delete"], [")", "", "delete"], [")", ")", "equal"], [")", ")", "equal"], [";", ";", "equal"], ["}", "}", "equal"]], "src_desc_tokens": ["Generates", "a", "code", "sample", "for", "using", "{", "<con>", "@", "<con>", "link", "Directory", "<con>", "Async", "<con>", "Client", "<con>", "#", "<con>", "force", "<con>", "Close", "<con>", "Handles", "<con>", "(", "<con>", "String", "<con>", ",", "boolean", "<con>", ")", "<con>", "}"], "dst_desc_tokens": ["code", "snippet", "for", "{", "<con>", "@", "<con>", "link", "Directory", "<con>", "Async", "<con>", "Client", "<con>", "#", "<con>", "force", "<con>", "Close", "<con>", "All", "<con>", "Handles", "<con>", "(", "<con>", "boolean", "<con>", ")", "<con>", "}", "<con>", "."], "label": true}
{"idx": 0, "sample_id": 1742442, "full_name": "danfickle/openhtmltopdf", "commit_id": "d9095a86d825fe2dd803c67f457e151eeb7ff953", "src_method": "public final TFinalClass useProtocolsStreamImplementation(HttpStreamFactory factory, String... protocols) {\n\t\tfor (String protocol : protocols) {\n\t\t\tstate._streamFactoryMap.put(protocol, factory);\n\t\t}\n\t\treturn (TFinalClass) this;\n\t}", "dst_method": "public final TFinalClass useProtocolsStreamImplementation(FSStreamFactory factory, String... protocols) {\n\t\tfor (String protocol : protocols) {\n\t\t\tstate._streamFactoryMap.put(protocol, factory);\n\t\t}\n\t\treturn (TFinalClass) this;\n\t}", "src_desc": "Provides an {@link com.openhtmltopdf.extend.HttpStreamFactory}\nimplementation if the user desires to use an external\nstream provider for a particular list of protocols.", "dst_desc": "Provides an {@link com.openhtmltopdf.extend.FSStreamFactory}\nimplementation if the user desires to use an external\nstream provider for a particular list of protocols.", "code_change_seq": [["public", "public", "equal"], ["final", "final", "equal"], ["T", "T", "equal"], ["<con>", "<con>", "equal"], ["Final", "Final", "equal"], ["<con>", "<con>", "equal"], ["Class", "Class", "equal"], ["use", "use", "equal"], ["<con>", "<con>", "equal"], ["Protocols", "Protocols", "equal"], ["<con>", "<con>", "equal"], ["Stream", "Stream", "equal"], ["<con>", "<con>", "equal"], ["Implementation", "Implementation", "equal"], ["(", "(", "equal"], ["Http", "FS", "replace"], ["<con>", "<con>", "equal"], ["Stream", "Stream", "equal"], ["<con>", "<con>", "equal"], ["Factory", "Factory", "equal"], ["factory", "factory", "equal"], [",", ",", "equal"], ["String", "String", "equal"], ["...", "...", "equal"], ["protocols", "protocols", "equal"], [")", ")", "equal"], ["{", "{", "equal"], ["for", "for", "equal"], ["(", "(", "equal"], ["String", "String", "equal"], ["protocol", "protocol", "equal"], [":", ":", "equal"], ["protocols", "protocols", "equal"], [")", ")", "equal"], ["{", "{", "equal"], ["state", "state", "equal"], [".", ".", "equal"], ["_", "_", "equal"], ["<con>", "<con>", "equal"], ["stream", "stream", "equal"], ["<con>", "<con>", "equal"], ["Factory", "Factory", "equal"], ["<con>", "<con>", "equal"], ["Map", "Map", "equal"], [".", ".", "equal"], ["put", "put", "equal"], ["(", "(", "equal"], ["protocol", "protocol", "equal"], [",", ",", "equal"], ["factory", "factory", "equal"], [")", ")", "equal"], [";", ";", "equal"], ["}", "}", "equal"], ["return", "return", "equal"], ["(", "(", "equal"], ["T", "T", "equal"], ["<con>", "<con>", "equal"], ["Final", "Final", "equal"], ["<con>", "<con>", "equal"], ["Class", "Class", "equal"], [")", ")", "equal"], ["this", "this", "equal"], [";", ";", "equal"], ["}", "}", "equal"]], "src_desc_tokens": ["Provides", "an", "{", "<con>", "@", "<con>", "link", "com", "<con>", ".", "<con>", "openhtmltopdf", "<con>", ".", "<con>", "extend", "<con>", ".", "<con>", "Http", "<con>", "Stream", "<con>", "Factory", "<con>", "}", "implementation", "if", "the", "user", "desires", "to", "use", "an", "external", "stream", "provider", "for", "a", "particular", "list", "of", "protocols", "<con>", "."], "dst_desc_tokens": ["Provides", "an", "{", "<con>", "@", "<con>", "link", "com", "<con>", ".", "<con>", "openhtmltopdf", "<con>", ".", "<con>", "extend", "<con>", ".", "<con>", "FS", "<con>", "Stream", "<con>", "Factory", "<con>", "}", "implementation", "if", "the", "user", "desires", "to", "use", "an", "external", "stream", "provider", "for", "a", "particular", "list", "of", "protocols", "<con>", "."], "label": true}
{"idx": 1, "sample_id": 5315975, "full_name": "spring-projects/spring-framework", "commit_id": "a532afb15d298f2114d6072f0d29138c89bda04f", "src_method": "public void start(String taskName) throws IllegalStateException {\n\t\tif (this.currentTaskName != null) {\n\t\t\tthrow new IllegalStateException(\"Can't start StopWatch: it's already running\");\n\t\t}\n\t\tthis.currentTaskName = taskName;\n\t\tthis.startTimeMillis = System.currentTimeMillis();\n\t}", "dst_method": "public void start(String taskName) throws IllegalStateException {\n\t\tif (this.currentTaskName != null) {\n\t\t\tthrow new IllegalStateException(\"Can't start StopWatch: it's already running\");\n\t\t}\n\t\tthis.currentTaskName = taskName;\n\t\tthis.startTimeNanos = System.nanoTime();\n\t}", "src_desc": "The results are undefined if {@link #stop()}\nor timing methods are called without invoking this method.", "dst_desc": "The results are undefined if {@link #stop()} or timing methods are\ncalled without invoking this method first.", "code_change_seq": [["public", "public", "equal"], ["void", "void", "equal"], ["start", "start", "equal"], ["(", "(", "equal"], ["String", "String", "equal"], ["task", "task", "equal"], ["<con>", "<con>", "equal"], ["Name", "Name", "equal"], [")", ")", "equal"], ["throws", "throws", "equal"], ["Illegal", "Illegal", "equal"], ["<con>", "<con>", "equal"], ["State", "State", "equal"], ["<con>", "<con>", "equal"], ["Exception", "Exception", "equal"], ["{", "{", "equal"], ["if", "if", "equal"], ["(", "(", "equal"], ["this", "this", "equal"], [".", ".", "equal"], ["current", "current", "equal"], ["<con>", "<con>", "equal"], ["Task", "Task", "equal"], ["<con>", "<con>", "equal"], ["Name", "Name", "equal"], ["!=", "!=", "equal"], ["null", "null", "equal"], [")", ")", "equal"], ["{", "{", "equal"], ["throw", "throw", "equal"], ["new", "new", "equal"], ["Illegal", "Illegal", "equal"], ["<con>", "<con>", "equal"], ["State", "State", "equal"], ["<con>", "<con>", "equal"], ["Exception", "Exception", "equal"], ["(", "(", "equal"], ["\"", "\"", "equal"], ["Can", "Can", "equal"], ["<con>", "<con>", "equal"], ["'", "'", "equal"], ["<con>", "<con>", "equal"], ["t", "t", "equal"], ["start", "start", "equal"], ["Stop", "Stop", "equal"], ["<con>", "<con>", "equal"], ["Watch", "Watch", "equal"], ["<con>", "<con>", "equal"], [":", ":", "equal"], ["it", "it", "equal"], ["<con>", "<con>", "equal"], ["'", "'", "equal"], ["<con>", "<con>", "equal"], ["s", "s", "equal"], ["already", "already", "equal"], ["running", "running", "equal"], ["\"", "\"", "equal"], [")", ")", "equal"], [";", ";", "equal"], ["}", "}", "equal"], ["this", "this", "equal"], [".", ".", "equal"], ["current", "current", "equal"], ["<con>", "<con>", "equal"], ["Task", "Task", "equal"], ["<con>", "<con>", "equal"], ["Name", "Name", "equal"], ["=", "=", "equal"], ["task", "task", "equal"], ["<con>", "<con>", "equal"], ["Name", "Name", "equal"], [";", ";", "equal"], ["this", "this", "equal"], [".", ".", "equal"], ["start", "start", "equal"], ["<con>", "<con>", "equal"], ["Time", "Time", "equal"], ["<con>", "<con>", "equal"], ["Millis", "Nanos", "replace"], ["=", "=", "equal"], ["System", "System", "equal"], [".", ".", "equal"], ["current", "nano", "replace"], ["<con>", "<con>", "equal"], ["Time", "Time", "equal"], ["<con>", "", "delete"], ["Millis", "", "delete"], ["(", "(", "equal"], [")", ")", "equal"], [";", ";", "equal"], ["}", "}", "equal"]], "src_desc_tokens": ["The", "results", "are", "undefined", "if", "{", "<con>", "@", "<con>", "link", "#", "<con>", "stop", "<con>", "(", "<con>", ")", "<con>", "}", "or", "timing", "methods", "are", "called", "without", "invoking", "this", "method", "<con>", "."], "dst_desc_tokens": ["The", "results", "are", "undefined", "if", "{", "<con>", "@", "<con>", "link", "#", "<con>", "stop", "<con>", "(", "<con>", ")", "<con>", "}", "or", "timing", "methods", "are", "called", "without", "invoking", "this", "method", "first", "<con>", "."], "label": true}
{"idx": 0, "sample_id": 5764055, "full_name": "JabRef/jabref", "commit_id": "164843bd45eb6fec25367a6246e661862ed38c5e", "src_method": "public static Optional<DOI> findInText(String text) {\n        Optional<DOI> result = Optional.empty();\n\n        Matcher matcher = DOI_PATT.matcher(text);\n        if (matcher.find()) {\n            // match only group \\1\n            result = Optional.of(new DOI(matcher.group(1)));\n        }\n        return result;\n    }", "dst_method": "public static Optional<DOI> findInText(String text) {\n        Optional<DOI> result = Optional.empty();\n\n        Matcher matcher = DOI_PATT.matcher(text);\n        if (matcher.find()) {\n            // match only group \\1\n            result = Optional.of(new DOI(matcher.group(1)));\n        }\n\n        matcher = SHORT_DOI_PATT.matcher(text);\n        if (matcher.find()) {\n            result = Optional.of(new DOI(matcher.group(1)));\n        }\n\n        return result;\n    }", "src_desc": "Tries to find a DOI inside the given text.", "dst_desc": "Tries to find a DOI/Short DOI inside the given text.", "code_change_seq": [["public", "public", "equal"], ["static", "static", "equal"], ["Optional", "Optional", "equal"], ["<", "<", "equal"], ["DOI", "DOI", "equal"], [">", ">", "equal"], ["find", "find", "equal"], ["<con>", "<con>", "equal"], ["In", "In", "equal"], ["<con>", "<con>", "equal"], ["Text", "Text", "equal"], ["(", "(", "equal"], ["String", "String", "equal"], ["text", "text", "equal"], [")", ")", "equal"], ["{", "{", "equal"], ["Optional", "Optional", "equal"], ["<", "<", "equal"], ["DOI", "DOI", "equal"], [">", ">", "equal"], ["result", "result", "equal"], ["=", "=", "equal"], ["Optional", "Optional", "equal"], [".", ".", "equal"], ["empty", "empty", "equal"], ["(", "(", "equal"], [")", ")", "equal"], [";", ";", "equal"], ["Matcher", "Matcher", "equal"], ["matcher", "matcher", "equal"], ["=", "=", "equal"], ["DOI", "DOI", "equal"], ["<con>", "<con>", "equal"], ["_", "_", "equal"], ["<con>", "<con>", "equal"], ["PATT", "PATT", "equal"], [".", ".", "equal"], ["matcher", "matcher", "equal"], ["(", "(", "equal"], ["text", "text", "equal"], [")", ")", "equal"], [";", ";", "equal"], ["if", "if", "equal"], ["(", "(", "equal"], ["matcher", "matcher", "equal"], [".", ".", "equal"], ["find", "find", "equal"], ["(", "(", "equal"], [")", ")", "equal"], [")", ")", "equal"], ["{", "{", "equal"], ["result", "result", "equal"], ["=", "=", "equal"], ["Optional", "Optional", "equal"], [".", ".", "equal"], ["of", "of", "equal"], ["(", "(", "equal"], ["new", "new", "equal"], ["DOI", "DOI", "equal"], ["(", "(", "equal"], ["matcher", "matcher", "equal"], [".", ".", "equal"], ["group", "group", "equal"], ["(", "(", "equal"], ["1", "1", "equal"], [")", ")", "equal"], [")", ")", "equal"], [")", ")", "equal"], [";", ";", "equal"], ["}", "}", "equal"], ["", "matcher", "insert"], ["", "=", "insert"], ["", "SHORT", "insert"], ["", "<con>", "insert"], ["", "_", "insert"], ["", "<con>", "insert"], ["", "DOI", "insert"], ["", "<con>", "insert"], ["", "_", "insert"], ["", "<con>", "insert"], ["", "PATT", "insert"], ["", ".", "insert"], ["", "matcher", "insert"], ["", "(", "insert"], ["", "text", "insert"], ["", ")", "insert"], ["", ";", "insert"], ["", "if", "insert"], ["", "(", "insert"], ["", "matcher", "insert"], ["", ".", "insert"], ["", "find", "insert"], ["", "(", "insert"], ["", ")", "insert"], ["", ")", "insert"], ["", "{", "insert"], ["", "result", "insert"], ["", "=", "insert"], ["", "Optional", "insert"], ["", ".", "insert"], ["", "of", "insert"], ["", "(", "insert"], ["", "new", "insert"], ["", "DOI", "insert"], ["", "(", "insert"], ["", "matcher", "insert"], ["", ".", "insert"], ["", "group", "insert"], ["", "(", "insert"], ["", "1", "insert"], ["", ")", "insert"], ["", ")", "insert"], ["", ")", "insert"], ["", ";", "insert"], ["", "}", "insert"], ["return", "return", "equal"], ["result", "result", "equal"], [";", ";", "equal"], ["}", "}", "equal"]], "src_desc_tokens": ["Tries", "to", "find", "a", "DOI", "inside", "the", "given", "text", "<con>", "."], "dst_desc_tokens": ["Tries", "to", "find", "a", "DOI", "<con>", "/", "<con>", "Short", "DOI", "inside", "the", "given", "text", "<con>", "."], "label": true}
{"idx": 1, "sample_id": 3731867, "full_name": "typetools/checker-framework", "commit_id": "8d5bc03a386a67470619714fea7f186ba587d52a", "src_method": "private void applyDefaults(Tree tree, AnnotatedTypeMirror type) {\n\n        // The location to take defaults from.\n        Element elt;\n        switch (tree.getKind()) {\n            case MEMBER_SELECT:\n                elt = TreeUtils.elementFromUse((MemberSelectTree) tree);\n                break;\n\n            case IDENTIFIER:\n                elt = TreeUtils.elementFromUse((IdentifierTree) tree);\n                break;\n\n            case METHOD_INVOCATION:\n                elt = TreeUtils.elementFromUse((MethodInvocationTree) tree);\n                break;\n\n                // TODO cases for array access, etc. -- every expression tree\n                // (The above probably means that we should use defaults in the\n                // scope of the declaration of the array.  Is that right?  -MDE)\n\n            default:\n                // If no associated symbol was found, use the tree's (lexical)\n                // scope.\n                elt = nearestEnclosingExceptLocal(tree);\n                // elt = nearestEnclosing(tree);\n        }\n        // System.out.println(\"applyDefaults on tree \" + tree +\n        //        \" gives elt: \" + elt + \"(\" + elt.getKind() + \")\");\n\n        boolean defaultTypeVarLocals =\n                (atypeFactory instanceof GenericAnnotatedTypeFactory<?, ?, ?, ?>)\n                        && ((GenericAnnotatedTypeFactory<?, ?, ?, ?>) atypeFactory)\n                                .getShouldDefaultTypeVarLocals();\n        applyToTypeVar =\n                defaultTypeVarLocals\n                        && elt != null\n                        && elt.getKind() == ElementKind.LOCAL_VARIABLE\n                        && type.getKind() == TypeKind.TYPEVAR;\n        applyDefaultsElement(elt, type);\n        applyToTypeVar = false;\n    }", "dst_method": "private void applyDefaults(Tree tree, AnnotatedTypeMirror type) {\n\n        // The location to take defaults from.\n        Element elt;\n        switch (tree.getKind()) {\n            case MEMBER_SELECT:\n                elt = TreeUtils.elementFromUse((MemberSelectTree) tree);\n                break;\n\n            case IDENTIFIER:\n                elt = TreeUtils.elementFromUse((IdentifierTree) tree);\n                break;\n\n            case METHOD_INVOCATION:\n                elt = TreeUtils.elementFromUse((MethodInvocationTree) tree);\n                break;\n\n                // TODO cases for array access, etc. -- every expression tree\n                // (The above probably means that we should use defaults in the\n                // scope of the declaration of the array.  Is that right?  -MDE)\n\n            case CLASS:\n                if (((ClassTree) tree).getExtendsClause() != null) {\n                    Element extendsElt =\n                            TreeUtils.elementFromTree(((ClassTree) tree).getExtendsClause());\n                    applyDefaultsToElement(extendsElt, type);\n                }\n                for (Tree implicitClause : ((ClassTree) tree).getImplementsClause()) {\n                    Element implementsElt = TreeUtils.elementFromTree(implicitClause);\n                    applyDefaultsToElement(implementsElt, type);\n                }\n                elt = nearestEnclosingExceptLocal(tree);\n                break;\n\n            default:\n                // If no associated symbol was found, use the tree's (lexical)\n                // scope.\n                elt = nearestEnclosingExceptLocal(tree);\n                // elt = nearestEnclosing(tree);\n        }\n        // System.out.println(\"applyDefaults on tree \" + tree +\n        //        \" gives elt: \" + elt + \"(\" + elt.getKind() + \")\");\n\n        applyDefaultsToElement(elt, type);\n    }", "src_desc": "A {@link com.sun.source.tree.Tree} that determines the\nappropriate scope for defaults.", "dst_desc": "A {@link com.sun.source.tree.Tree} determines the\nappropriate scope for defaults.", "code_change_seq": [["private", "private", "equal"], ["void", "void", "equal"], ["apply", "apply", "equal"], ["<con>", "<con>", "equal"], ["Defaults", "Defaults", "equal"], ["(", "(", "equal"], ["Tree", "Tree", "equal"], ["tree", "tree", "equal"], [",", ",", "equal"], ["Annotated", "Annotated", "equal"], ["<con>", "<con>", "equal"], ["Type", "Type", "equal"], ["<con>", "<con>", "equal"], ["Mirror", "Mirror", "equal"], ["type", "type", "equal"], [")", ")", "equal"], ["{", "{", "equal"], ["Element", "Element", "equal"], ["elt", "elt", "equal"], [";", ";", "equal"], ["switch", "switch", "equal"], ["(", "(", "equal"], ["tree", "tree", "equal"], [".", ".", "equal"], ["get", "get", "equal"], ["<con>", "<con>", "equal"], ["Kind", "Kind", "equal"], ["(", "(", "equal"], [")", ")", "equal"], [")", ")", "equal"], ["{", "{", "equal"], ["case", "case", "equal"], ["MEMBER", "MEMBER", "equal"], ["<con>", "<con>", "equal"], ["_", "_", "equal"], ["<con>", "<con>", "equal"], ["SELECT", "SELECT", "equal"], [":", ":", "equal"], ["elt", "elt", "equal"], ["=", "=", "equal"], ["Tree", "Tree", "equal"], ["<con>", "<con>", "equal"], ["Utils", "Utils", "equal"], [".", ".", "equal"], ["element", "element", "equal"], ["<con>", "<con>", "equal"], ["From", "From", "equal"], ["<con>", "<con>", "equal"], ["Use", "Use", "equal"], ["(", "(", "equal"], ["(", "(", "equal"], ["Member", "Member", "equal"], ["<con>", "<con>", "equal"], ["Select", "Select", "equal"], ["<con>", "<con>", "equal"], ["Tree", "Tree", "equal"], [")", ")", "equal"], ["tree", "tree", "equal"], [")", ")", "equal"], [";", ";", "equal"], ["break", "break", "equal"], [";", ";", "equal"], ["case", "case", "equal"], ["IDENTIFIER", "IDENTIFIER", "equal"], [":", ":", "equal"], ["elt", "elt", "equal"], ["=", "=", "equal"], ["Tree", "Tree", "equal"], ["<con>", "<con>", "equal"], ["Utils", "Utils", "equal"], [".", ".", "equal"], ["element", "element", "equal"], ["<con>", "<con>", "equal"], ["From", "From", "equal"], ["<con>", "<con>", "equal"], ["Use", "Use", "equal"], ["(", "(", "equal"], ["(", "(", "equal"], ["Identifier", "Identifier", "equal"], ["<con>", "<con>", "equal"], ["Tree", "Tree", "equal"], [")", ")", "equal"], ["tree", "tree", "equal"], [")", ")", "equal"], [";", ";", "equal"], ["break", "break", "equal"], [";", ";", "equal"], ["case", "case", "equal"], ["METHOD", "METHOD", "equal"], ["<con>", "<con>", "equal"], ["_", "_", "equal"], ["<con>", "<con>", "equal"], ["INVOCATION", "INVOCATION", "equal"], [":", ":", "equal"], ["elt", "elt", "equal"], ["=", "=", "equal"], ["Tree", "Tree", "equal"], ["<con>", "<con>", "equal"], ["Utils", "Utils", "equal"], [".", ".", "equal"], ["element", "element", "equal"], ["<con>", "<con>", "equal"], ["From", "From", "equal"], ["<con>", "<con>", "equal"], ["Use", "Use", "equal"], ["(", "(", "equal"], ["(", "(", "equal"], ["Method", "Method", "equal"], ["<con>", "<con>", "equal"], ["Invocation", "Invocation", "equal"], ["<con>", "<con>", "equal"], ["Tree", "Tree", "equal"], [")", ")", "equal"], ["tree", "tree", "equal"], [")", ")", "equal"], [";", ";", "equal"], ["break", "break", "equal"], [";", ";", "equal"], ["", "case", "insert"], ["", "CLASS", "insert"], ["", ":", "insert"], ["", "if", "insert"], ["", "(", "insert"], ["", "(", "insert"], ["", "(", "insert"], ["", "Class", "insert"], ["", "<con>", "insert"], ["", "Tree", "insert"], ["", ")", "insert"], ["", "tree", "insert"], ["", ")", "insert"], ["", ".", "insert"], ["", "get", "insert"], ["", "<con>", "insert"], ["", "Extends", "insert"], ["", "<con>", "insert"], ["", "Clause", "insert"], ["", "(", "insert"], ["", ")", "insert"], ["", "!=", "insert"], ["", "null", "insert"], ["", ")", "insert"], ["", "{", "insert"], ["", "Element", "insert"], ["", "extends", "insert"], ["", "<con>", "insert"], ["", "Elt", "insert"], ["", "=", "insert"], ["", "Tree", "insert"], ["", "<con>", "insert"], ["", "Utils", "insert"], ["", ".", "insert"], ["", "element", "insert"], ["", "<con>", "insert"], ["", "From", "insert"], ["", "<con>", "insert"], ["", "Tree", "insert"], ["", "(", "insert"], ["", "(", "insert"], ["", "(", "insert"], ["", "Class", "insert"], ["", "<con>", "insert"], ["", "Tree", "insert"], ["", ")", "insert"], ["", "tree", "insert"], ["", ")", "insert"], ["", ".", "insert"], ["", "get", "insert"], ["", "<con>", "insert"], ["", "Extends", "insert"], ["", "<con>", "insert"], ["", "Clause", "insert"], ["", "(", "insert"], ["", ")", "insert"], ["", ")", "insert"], ["", ";", "insert"], ["", "apply", "insert"], ["", "<con>", "insert"], ["", "Defaults", "insert"], ["", "<con>", "insert"], ["", "To", "insert"], ["", "<con>", "insert"], ["", "Element", "insert"], ["", "(", "insert"], ["", "extends", "insert"], ["", "<con>", "insert"], ["", "Elt", "insert"], ["", ",", "insert"], ["", "type", "insert"], ["", ")", "insert"], ["", ";", "insert"], ["", "}", "insert"], ["", "for", "insert"], ["", "(", "insert"], ["", "Tree", "insert"], ["", "implicit", "insert"], ["", "<con>", "insert"], ["", "Clause", "insert"], ["", ":", "insert"], ["", "(", "insert"], ["", "(", "insert"], ["", "Class", "insert"], ["", "<con>", "insert"], ["", "Tree", "insert"], ["", ")", "insert"], ["", "tree", "insert"], ["", ")", "insert"], ["", ".", "insert"], ["", "get", "insert"], ["", "<con>", "insert"], ["", "Implements", "insert"], ["", "<con>", "insert"], ["", "Clause", "insert"], ["", "(", "insert"], ["", ")", "insert"], ["", ")", "insert"], ["", "{", "insert"], ["", "Element", "insert"], ["", "implements", "insert"], ["", "<con>", "insert"], ["", "Elt", "insert"], ["", "=", "insert"], ["", "Tree", "insert"], ["", "<con>", "insert"], ["", "Utils", "insert"], ["", ".", "insert"], ["", "element", "insert"], ["", "<con>", "insert"], ["", "From", "insert"], ["", "<con>", "insert"], ["", "Tree", "insert"], ["", "(", "insert"], ["", "implicit", "insert"], ["", "<con>", "insert"], ["", "Clause", "insert"], ["", ")", "insert"], ["", ";", "insert"], ["", "apply", "insert"], ["", "<con>", "insert"], ["", "Defaults", "insert"], ["", "<con>", "insert"], ["", "To", "insert"], ["", "<con>", "insert"], ["", "Element", "insert"], ["", "(", "insert"], ["", "implements", "insert"], ["", "<con>", "insert"], ["", "Elt", "insert"], ["", ",", "insert"], ["", "type", "insert"], ["", ")", "insert"], ["", ";", "insert"], ["", "}", "insert"], ["", "elt", "insert"], ["", "=", "insert"], ["", "nearest", "insert"], ["", "<con>", "insert"], ["", "Enclosing", "insert"], ["", "<con>", "insert"], ["", "Except", "insert"], ["", "<con>", "insert"], ["", "Local", "insert"], ["", "(", "insert"], ["", "tree", "insert"], ["", ")", "insert"], ["", ";", "insert"], ["", "break", "insert"], ["", ";", "insert"], ["default", "default", "equal"], [":", ":", "equal"], ["elt", "elt", "equal"], ["=", "=", "equal"], ["nearest", "nearest", "equal"], ["<con>", "<con>", "equal"], ["Enclosing", "Enclosing", "equal"], ["<con>", "<con>", "equal"], ["Except", "Except", "equal"], ["<con>", "<con>", "equal"], ["Local", "Local", "equal"], ["(", "(", "equal"], ["tree", "tree", "equal"], [")", ")", "equal"], [";", ";", "equal"], ["}", "}", "equal"], ["boolean", "", "delete"], ["default", "", "delete"], ["<con>", "", "delete"], ["Type", "", "delete"], ["<con>", "", "delete"], ["Var", "", "delete"], ["<con>", "", "delete"], ["Locals", "", "delete"], ["=", "", "delete"], ["(", "", "delete"], ["atype", "", "delete"], ["<con>", "", "delete"], ["Factory", "", "delete"], ["instanceof", "", "delete"], ["Generic", "", "delete"], ["<con>", "", "delete"], ["Annotated", "", "delete"], ["<con>", "", "delete"], ["Type", "", "delete"], ["<con>", "", "delete"], ["Factory", "", "delete"], ["<", "", "delete"], ["?", "", "delete"], [",", "", "delete"], ["?", "", "delete"], [",", "", "delete"], ["?", "", "delete"], [",", "", "delete"], ["?", "", "delete"], [">", "", "delete"], [")", "", "delete"], ["&&", "", "delete"], ["(", "", "delete"], ["(", "", "delete"], ["Generic", "", "delete"], ["<con>", "", "delete"], ["Annotated", "", "delete"], ["<con>", "", "delete"], ["Type", "", "delete"], ["<con>", "", "delete"], ["Factory", "", "delete"], ["<", "", "delete"], ["?", "", "delete"], [",", "", "delete"], ["?", "", "delete"], [",", "", "delete"], ["?", "", "delete"], [",", "", "delete"], ["?", "", "delete"], [">", "", "delete"], [")", "", "delete"], ["atype", "", "delete"], ["<con>", "", "delete"], ["Factory", "", "delete"], [")", "", "delete"], [".", "", "delete"], ["get", "", "delete"], ["<con>", "", "delete"], ["Should", "", "delete"], ["<con>", "", "delete"], ["Default", "", "delete"], ["<con>", "", "delete"], ["Type", "", "delete"], ["<con>", "", "delete"], ["Var", "", "delete"], ["<con>", "", "delete"], ["Locals", "", "delete"], ["(", "", "delete"], [")", "", "delete"], [";", "", "delete"], ["apply", "", "delete"], ["<con>", "", "delete"], ["To", "", "delete"], ["<con>", "", "delete"], ["Type", "", "delete"], ["<con>", "", "delete"], ["Var", "", "delete"], ["=", "", "delete"], ["default", "", "delete"], ["<con>", "", "delete"], ["Type", "", "delete"], ["<con>", "", "delete"], ["Var", "", "delete"], ["<con>", "", "delete"], ["Locals", "", "delete"], ["&&", "", "delete"], ["elt", "", "delete"], ["!=", "", "delete"], ["null", "", "delete"], ["&&", "", "delete"], ["elt", "", "delete"], [".", "", "delete"], ["get", "", "delete"], ["<con>", "", "delete"], ["Kind", "", "delete"], ["(", "", "delete"], [")", "", "delete"], ["==", "", "delete"], ["Element", "", "delete"], ["<con>", "", "delete"], ["Kind", "", "delete"], [".", "", "delete"], ["LOCAL", "", "delete"], ["<con>", "", "delete"], ["_", "", "delete"], ["<con>", "", "delete"], ["VARIABLE", "", "delete"], ["&&", "", "delete"], ["type", "", "delete"], [".", "", "delete"], ["get", "", "delete"], ["<con>", "", "delete"], ["Kind", "", "delete"], ["(", "", "delete"], [")", "", "delete"], ["==", "", "delete"], ["Type", "", "delete"], ["<con>", "", "delete"], ["Kind", "", "delete"], [".", "", "delete"], ["TYPEVAR", "", "delete"], [";", "", "delete"], ["apply", "apply", "equal"], ["<con>", "<con>", "equal"], ["Defaults", "Defaults", "equal"], ["<con>", "<con>", "equal"], ["", "To", "insert"], ["", "<con>", "insert"], ["Element", "Element", "equal"], ["(", "(", "equal"], ["elt", "elt", "equal"], [",", ",", "equal"], ["type", "type", "equal"], [")", ")", "equal"], [";", ";", "equal"], ["apply", "", "delete"], ["<con>", "", "delete"], ["To", "", "delete"], ["<con>", "", "delete"], ["Type", "", "delete"], ["<con>", "", "delete"], ["Var", "", "delete"], ["=", "", "delete"], ["false", "", "delete"], [";", "", "delete"], ["}", "}", "equal"]], "src_desc_tokens": ["A", "{", "<con>", "@", "<con>", "link", "com", "<con>", ".", "<con>", "sun", "<con>", ".", "<con>", "source", "<con>", ".", "<con>", "tree", "<con>", ".", "<con>", "Tree", "<con>", "}", "that", "determines", "the", "appropriate", "scope", "for", "defaults", "<con>", "."], "dst_desc_tokens": ["A", "{", "<con>", "@", "<con>", "link", "com", "<con>", ".", "<con>", "sun", "<con>", ".", "<con>", "source", "<con>", ".", "<con>", "tree", "<con>", ".", "<con>", "Tree", "<con>", "}", "determines", "the", "appropriate", "scope", "for", "defaults", "<con>", "."], "label": true}
{"idx": 0, "sample_id": 4478939, "full_name": "Azure/azure-sdk-for-java", "commit_id": "4486ee01367850a4d96845886b58af4cedb63bff", "src_method": "public void setPropertiesAsyncEnableMetrics() {\n        // BEGIN: com.azure.storage.queue.queueServiceAsyncClient.setPropertiesWithResponseEnableMetrics#storageServiceProperties\n        StorageServiceProperties properties = client.getProperties().block();\n        properties.getMinuteMetrics().setEnabled(true);\n        properties.getHourMetrics().setEnabled(true);\n        client.setPropertiesWithResponse(properties)\n            .subscribe(response -> System.out.printf(\"Setting Queue service properties completed with status code %d\",\n                response.getStatusCode()));\n        // END: com.azure.storage.queue.queueServiceAsyncClient.setPropertiesWithResponseEnableMetrics#storageServiceProperties\n    }", "dst_method": "public void setPropertiesAsyncEnableMetrics() {\n        // BEGIN: com.azure.storage.queue.queueServiceAsyncClient.setPropertiesWithResponseEnableMetrics#QueueServiceProperties\n        QueueServiceProperties properties = client.getProperties().block();\n        properties.getMinuteMetrics().setEnabled(true);\n        properties.getHourMetrics().setEnabled(true);\n        client.setPropertiesWithResponse(properties)\n            .subscribe(response -> System.out.printf(\"Setting Queue service properties completed with status code %d\",\n                response.getStatusCode()));\n        // END: com.azure.storage.queue.queueServiceAsyncClient.setPropertiesWithResponseEnableMetrics#QueueServiceProperties\n    }", "src_desc": "Generates a code sample for using {@link QueueServiceAsyncClient#setPropertiesWithResponse(StorageServiceProperties)}\nwith metrics enabled.", "dst_desc": "Generates a code sample for using {@link QueueServiceAsyncClient#setPropertiesWithResponse(QueueServiceProperties)}\nwith metrics enabled.", "code_change_seq": [["public", "public", "equal"], ["void", "void", "equal"], ["set", "set", "equal"], ["<con>", "<con>", "equal"], ["Properties", "Properties", "equal"], ["<con>", "<con>", "equal"], ["Async", "Async", "equal"], ["<con>", "<con>", "equal"], ["Enable", "Enable", "equal"], ["<con>", "<con>", "equal"], ["Metrics", "Metrics", "equal"], ["(", "(", "equal"], [")", ")", "equal"], ["{", "{", "equal"], ["Storage", "Queue", "replace"], ["<con>", "<con>", "equal"], ["Service", "Service", "equal"], ["<con>", "<con>", "equal"], ["Properties", "Properties", "equal"], ["properties", "properties", "equal"], ["=", "=", "equal"], ["client", "client", "equal"], [".", ".", "equal"], ["get", "get", "equal"], ["<con>", "<con>", "equal"], ["Properties", "Properties", "equal"], ["(", "(", "equal"], [")", ")", "equal"], [".", ".", "equal"], ["block", "block", "equal"], ["(", "(", "equal"], [")", ")", "equal"], [";", ";", "equal"], ["properties", "properties", "equal"], [".", ".", "equal"], ["get", "get", "equal"], ["<con>", "<con>", "equal"], ["Minute", "Minute", "equal"], ["<con>", "<con>", "equal"], ["Metrics", "Metrics", "equal"], ["(", "(", "equal"], [")", ")", "equal"], [".", ".", "equal"], ["set", "set", "equal"], ["<con>", "<con>", "equal"], ["Enabled", "Enabled", "equal"], ["(", "(", "equal"], ["true", "true", "equal"], [")", ")", "equal"], [";", ";", "equal"], ["properties", "properties", "equal"], [".", ".", "equal"], ["get", "get", "equal"], ["<con>", "<con>", "equal"], ["Hour", "Hour", "equal"], ["<con>", "<con>", "equal"], ["Metrics", "Metrics", "equal"], ["(", "(", "equal"], [")", ")", "equal"], [".", ".", "equal"], ["set", "set", "equal"], ["<con>", "<con>", "equal"], ["Enabled", "Enabled", "equal"], ["(", "(", "equal"], ["true", "true", "equal"], [")", ")", "equal"], [";", ";", "equal"], ["client", "client", "equal"], [".", ".", "equal"], ["set", "set", "equal"], ["<con>", "<con>", "equal"], ["Properties", "Properties", "equal"], ["<con>", "<con>", "equal"], ["With", "With", "equal"], ["<con>", "<con>", "equal"], ["Response", "Response", "equal"], ["(", "(", "equal"], ["properties", "properties", "equal"], [")", ")", "equal"], [".", ".", "equal"], ["subscribe", "subscribe", "equal"], ["(", "(", "equal"], ["response", "response", "equal"], ["->", "->", "equal"], ["System", "System", "equal"], [".", ".", "equal"], ["out", "out", "equal"], [".", ".", "equal"], ["printf", "printf", "equal"], ["(", "(", "equal"], ["\"", "\"", "equal"], ["Setting", "Setting", "equal"], ["Queue", "Queue", "equal"], ["service", "service", "equal"], ["properties", "properties", "equal"], ["completed", "completed", "equal"], ["with", "with", "equal"], ["status", "status", "equal"], ["code", "code", "equal"], ["%", "%", "equal"], ["<con>", "<con>", "equal"], ["d", "d", "equal"], ["\"", "\"", "equal"], [",", ",", "equal"], ["response", "response", "equal"], [".", ".", "equal"], ["get", "get", "equal"], ["<con>", "<con>", "equal"], ["Status", "Status", "equal"], ["<con>", "<con>", "equal"], ["code", "code", "equal"], ["(", "(", "equal"], [")", ")", "equal"], [")", ")", "equal"], [")", ")", "equal"], [";", ";", "equal"], ["}", "}", "equal"]], "src_desc_tokens": ["Generates", "a", "code", "sample", "for", "using", "{", "<con>", "@", "<con>", "link", "Queue", "<con>", "Service", "<con>", "Async", "<con>", "Client", "<con>", "#", "<con>", "set", "<con>", "Properties", "<con>", "With", "<con>", "Response", "<con>", "(", "<con>", "Storage", "<con>", "Service", "<con>", "Properties", "<con>", ")", "<con>", "}", "with", "metrics", "enabled", "<con>", "."], "dst_desc_tokens": ["Generates", "a", "code", "sample", "for", "using", "{", "<con>", "@", "<con>", "link", "Queue", "<con>", "Service", "<con>", "Async", "<con>", "Client", "<con>", "#", "<con>", "set", "<con>", "Properties", "<con>", "With", "<con>", "Response", "<con>", "(", "<con>", "Queue", "<con>", "Service", "<con>", "Properties", "<con>", ")", "<con>", "}", "with", "metrics", "enabled", "<con>", "."], "label": true}
{"idx": 0, "sample_id": 5630312, "full_name": "watson-developer-cloud/java-sdk", "commit_id": "c44118e6766c0927c12a84f79c78197ae886b253", "src_method": "public void setOrganizationUrl(final String organizationUrl) {\n    this.organizationUrl = organizationUrl;\n  }", "dst_method": "public Builder organizationUrl(String organizationUrl) {\n      this.organizationUrl = organizationUrl;\n      return this;\n    }", "src_desc": "Sets the organizationUrl.", "dst_desc": "Set the organizationUrl.", "code_change_seq": [["public", "public", "equal"], ["void", "Builder", "replace"], ["set", "", "delete"], ["<con>", "", "delete"], ["Organization", "organization", "replace"], ["<con>", "<con>", "equal"], ["Url", "Url", "equal"], ["(", "(", "equal"], ["final", "", "delete"], ["String", "String", "equal"], ["organization", "organization", "equal"], ["<con>", "<con>", "equal"], ["Url", "Url", "equal"], [")", ")", "equal"], ["{", "{", "equal"], ["this", "this", "equal"], [".", ".", "equal"], ["organization", "organization", "equal"], ["<con>", "<con>", "equal"], ["Url", "Url", "equal"], ["=", "=", "equal"], ["organization", "organization", "equal"], ["<con>", "<con>", "equal"], ["Url", "Url", "equal"], [";", ";", "equal"], ["", "return", "insert"], ["", "this", "insert"], ["", ";", "insert"], ["}", "}", "equal"]], "src_desc_tokens": ["Sets", "the", "organization", "<con>", "Url", "<con>", "."], "dst_desc_tokens": ["Set", "the", "organization", "<con>", "Url", "<con>", "."], "label": true}
{"idx": 0, "sample_id": 5454152, "full_name": "unofficial-openjdk/openjdk", "commit_id": "e51f5b986c729b517e9522b6591c7e9248e7e091", "src_method": "public SourceLocator getLocator() {\n        return locator;\n    }", "dst_method": "public SourceLocator getLocator() {\n        return this.locator;\n    }", "src_desc": "Method getLocator retrieves an instance of a SourceLocator\nobject that specifies where an error occured.", "dst_desc": "Method getLocator retrieves an instance of a SourceLocator\nobject that specifies where an error occurred.", "code_change_seq": [["public", "public", "equal"], ["Source", "Source", "equal"], ["<con>", "<con>", "equal"], ["Locator", "Locator", "equal"], ["get", "get", "equal"], ["<con>", "<con>", "equal"], ["Locator", "Locator", "equal"], ["(", "(", "equal"], [")", ")", "equal"], ["{", "{", "equal"], ["return", "return", "equal"], ["", "this", "insert"], ["", ".", "insert"], ["locator", "locator", "equal"], [";", ";", "equal"], ["}", "}", "equal"]], "src_desc_tokens": ["Method", "get", "<con>", "Locator", "retrieves", "an", "instance", "of", "a", "Source", "<con>", "Locator", "object", "that", "specifies", "where", "an", "error", "occured", "<con>", "."], "dst_desc_tokens": ["Method", "get", "<con>", "Locator", "retrieves", "an", "instance", "of", "a", "Source", "<con>", "Locator", "object", "that", "specifies", "where", "an", "error", "occurred", "<con>", "."], "label": true}
{"idx": 0, "sample_id": 2243531, "full_name": "HotswapProjects/HotswapAgent", "commit_id": "5655fb63d928ff74702894d112a752f94ff77aa6", "src_method": "@OnClassLoadEvent(classNameRegexp = \"org.apache.deltaspike.proxy.impl.AsmProxyClassGenerator\")\n    public static void patchAsmProxyClassGenerator(CtClass ctClass) throws NotFoundException, CannotCompileException {\n\n        CtMethod generateProxyClassMethod = ctClass.getDeclaredMethod(\"generateProxyClass\");\n        generateProxyClassMethod.instrument(\n                new ExprEditor() {\n                    public void edit(MethodCall m) throws CannotCompileException {\n                        if (m.getClassName().equals(\"org.apache.deltaspike.proxy.impl.AsmProxyClassGenerator\") && m.getMethodName().equals(\"loadClass\"))\n                            m.replace(\"{ $_ = org.hotswap.agent.plugin.deltaspike.proxy.ProxyClassLoadingDelegate.loadClass($$); }\");\n                    }\n                });\n    }", "dst_method": "@OnClassLoadEvent(classNameRegexp = \"org.apache.deltaspike.proxy.impl.AsmProxyClassGenerator\")\n    public static void patchAsmProxyClassGenerator(CtClass ctClass) throws NotFoundException, CannotCompileException {\n\n        CtMethod generateProxyClassMethod = ctClass.getDeclaredMethod(\"generateProxyClass\");\n        generateProxyClassMethod.instrument(\n                new ExprEditor() {\n                    public void edit(MethodCall m) throws CannotCompileException {\n                        if (m.getClassName().equals(\"org.apache.deltaspike.proxy.impl.AsmProxyClassGenerator\") && m.getMethodName().equals(\"loadClass\"))\n                            m.replace(\"{ $_ = org.hotswap.agent.plugin.deltaspike.command.ProxyClassLoadingDelegate.loadClass($$); }\");\n                    }\n                });\n    }", "src_desc": "Delegates loadClass to org.hotswap.agent.plugin.deltaspike.proxy.ProxyClassLoadingDelegate::loadClass", "dst_desc": "Delegates loadClass to org.hotswap.agent.plugin.deltaspike.command.ProxyClassLoadingDelegate::loadClass", "code_change_seq": [["@", "@", "equal"], ["On", "On", "equal"], ["<con>", "<con>", "equal"], ["Class", "Class", "equal"], ["<con>", "<con>", "equal"], ["Load", "Load", "equal"], ["<con>", "<con>", "equal"], ["Event", "Event", "equal"], ["(", "(", "equal"], ["class", "class", "equal"], ["<con>", "<con>", "equal"], ["Name", "Name", "equal"], ["<con>", "<con>", "equal"], ["Regexp", "Regexp", "equal"], ["=", "=", "equal"], ["\"", "\"", "equal"], ["org", "org", "equal"], ["<con>", "<con>", "equal"], [".", ".", "equal"], ["<con>", "<con>", "equal"], ["apache", "apache", "equal"], ["<con>", "<con>", "equal"], [".", ".", "equal"], ["<con>", "<con>", "equal"], ["deltaspike", "deltaspike", "equal"], ["<con>", "<con>", "equal"], [".", ".", "equal"], ["<con>", "<con>", "equal"], ["proxy", "proxy", "equal"], ["<con>", "<con>", "equal"], [".", ".", "equal"], ["<con>", "<con>", "equal"], ["impl", "impl", "equal"], ["<con>", "<con>", "equal"], [".", ".", "equal"], ["<con>", "<con>", "equal"], ["Asm", "Asm", "equal"], ["<con>", "<con>", "equal"], ["Proxy", "Proxy", "equal"], ["<con>", "<con>", "equal"], ["Class", "Class", "equal"], ["<con>", "<con>", "equal"], ["Generator", "Generator", "equal"], ["\"", "\"", "equal"], [")", ")", "equal"], ["public", "public", "equal"], ["static", "static", "equal"], ["void", "void", "equal"], ["patch", "patch", "equal"], ["<con>", "<con>", "equal"], ["Asm", "Asm", "equal"], ["<con>", "<con>", "equal"], ["Proxy", "Proxy", "equal"], ["<con>", "<con>", "equal"], ["Class", "Class", "equal"], ["<con>", "<con>", "equal"], ["Generator", "Generator", "equal"], ["(", "(", "equal"], ["Ct", "Ct", "equal"], ["<con>", "<con>", "equal"], ["Class", "Class", "equal"], ["ct", "ct", "equal"], ["<con>", "<con>", "equal"], ["Class", "Class", "equal"], [")", ")", "equal"], ["throws", "throws", "equal"], ["Not", "Not", "equal"], ["<con>", "<con>", "equal"], ["Found", "Found", "equal"], ["<con>", "<con>", "equal"], ["Exception", "Exception", "equal"], [",", ",", "equal"], ["Cannot", "Cannot", "equal"], ["<con>", "<con>", "equal"], ["Compile", "Compile", "equal"], ["<con>", "<con>", "equal"], ["Exception", "Exception", "equal"], ["{", "{", "equal"], ["Ct", "Ct", "equal"], ["<con>", "<con>", "equal"], ["Method", "Method", "equal"], ["generate", "generate", "equal"], ["<con>", "<con>", "equal"], ["Proxy", "Proxy", "equal"], ["<con>", "<con>", "equal"], ["Class", "Class", "equal"], ["<con>", "<con>", "equal"], ["Method", "Method", "equal"], ["=", "=", "equal"], ["ct", "ct", "equal"], ["<con>", "<con>", "equal"], ["Class", "Class", "equal"], [".", ".", "equal"], ["get", "get", "equal"], ["<con>", "<con>", "equal"], ["Declared", "Declared", "equal"], ["<con>", "<con>", "equal"], ["Method", "Method", "equal"], ["(", "(", "equal"], ["\"", "\"", "equal"], ["generate", "generate", "equal"], ["<con>", "<con>", "equal"], ["Proxy", "Proxy", "equal"], ["<con>", "<con>", "equal"], ["Class", "Class", "equal"], ["\"", "\"", "equal"], [")", ")", "equal"], [";", ";", "equal"], ["generate", "generate", "equal"], ["<con>", "<con>", "equal"], ["Proxy", "Proxy", "equal"], ["<con>", "<con>", "equal"], ["Class", "Class", "equal"], ["<con>", "<con>", "equal"], ["Method", "Method", "equal"], [".", ".", "equal"], ["instrument", "instrument", "equal"], ["(", "(", "equal"], ["new", "new", "equal"], ["Expr", "Expr", "equal"], ["<con>", "<con>", "equal"], ["Editor", "Editor", "equal"], ["(", "(", "equal"], [")", ")", "equal"], ["{", "{", "equal"], ["public", "public", "equal"], ["void", "void", "equal"], ["edit", "edit", "equal"], ["(", "(", "equal"], ["Method", "Method", "equal"], ["<con>", "<con>", "equal"], ["Call", "Call", "equal"], ["m", "m", "equal"], [")", ")", "equal"], ["throws", "throws", "equal"], ["Cannot", "Cannot", "equal"], ["<con>", "<con>", "equal"], ["Compile", "Compile", "equal"], ["<con>", "<con>", "equal"], ["Exception", "Exception", "equal"], ["{", "{", "equal"], ["if", "if", "equal"], ["(", "(", "equal"], ["m", "m", "equal"], [".", ".", "equal"], ["get", "get", "equal"], ["<con>", "<con>", "equal"], ["Class", "Class", "equal"], ["<con>", "<con>", "equal"], ["Name", "Name", "equal"], ["(", "(", "equal"], [")", ")", "equal"], [".", ".", "equal"], ["equals", "equals", "equal"], ["(", "(", "equal"], ["\"", "\"", "equal"], ["org", "org", "equal"], ["<con>", "<con>", "equal"], [".", ".", "equal"], ["<con>", "<con>", "equal"], ["apache", "apache", "equal"], ["<con>", "<con>", "equal"], [".", ".", "equal"], ["<con>", "<con>", "equal"], ["deltaspike", "deltaspike", "equal"], ["<con>", "<con>", "equal"], [".", ".", "equal"], ["<con>", "<con>", "equal"], ["proxy", "proxy", "equal"], ["<con>", "<con>", "equal"], [".", ".", "equal"], ["<con>", "<con>", "equal"], ["impl", "impl", "equal"], ["<con>", "<con>", "equal"], [".", ".", "equal"], ["<con>", "<con>", "equal"], ["Asm", "Asm", "equal"], ["<con>", "<con>", "equal"], ["Proxy", "Proxy", "equal"], ["<con>", "<con>", "equal"], ["Class", "Class", "equal"], ["<con>", "<con>", "equal"], ["Generator", "Generator", "equal"], ["\"", "\"", "equal"], [")", ")", "equal"], ["&&", "&&", "equal"], ["m", "m", "equal"], [".", ".", "equal"], ["get", "get", "equal"], ["<con>", "<con>", "equal"], ["Method", "Method", "equal"], ["<con>", "<con>", "equal"], ["Name", "Name", "equal"], ["(", "(", "equal"], [")", ")", "equal"], [".", ".", "equal"], ["equals", "equals", "equal"], ["(", "(", "equal"], ["\"", "\"", "equal"], ["load", "load", "equal"], ["<con>", "<con>", "equal"], ["Class", "Class", "equal"], ["\"", "\"", "equal"], [")", ")", "equal"], [")", ")", "equal"], ["m", "m", "equal"], [".", ".", "equal"], ["replace", "replace", "equal"], ["(", "(", "equal"], ["\"", "\"", "equal"], ["{", "{", "equal"], ["$", "$", "equal"], ["<con>", "<con>", "equal"], ["_", "_", "equal"], ["=", "=", "equal"], ["org", "org", "equal"], ["<con>", "<con>", "equal"], [".", ".", "equal"], ["<con>", "<con>", "equal"], ["hotswap", "hotswap", "equal"], ["<con>", "<con>", "equal"], [".", ".", "equal"], ["<con>", "<con>", "equal"], ["agent", "agent", "equal"], ["<con>", "<con>", "equal"], [".", ".", "equal"], ["<con>", "<con>", "equal"], ["plugin", "plugin", "equal"], ["<con>", "<con>", "equal"], [".", ".", "equal"], ["<con>", "<con>", "equal"], ["deltaspike", "deltaspike", "equal"], ["<con>", "<con>", "equal"], [".", ".", "equal"], ["<con>", "<con>", "equal"], ["proxy", "command", "replace"], ["<con>", "<con>", "equal"], [".", ".", "equal"], ["<con>", "<con>", "equal"], ["Proxy", "Proxy", "equal"], ["<con>", "<con>", "equal"], ["Class", "Class", "equal"], ["<con>", "<con>", "equal"], ["Loading", "Loading", "equal"], ["<con>", "<con>", "equal"], ["Delegate", "Delegate", "equal"], ["<con>", "<con>", "equal"], [".", ".", "equal"], ["<con>", "<con>", "equal"], ["load", "load", "equal"], ["<con>", "<con>", "equal"], ["Class", "Class", "equal"], ["<con>", "<con>", "equal"], ["(", "(", "equal"], ["<con>", "<con>", "equal"], ["$", "$", "equal"], ["<con>", "<con>", "equal"], ["$", "$", "equal"], ["<con>", "<con>", "equal"], [")", ")", "equal"], ["<con>", "<con>", "equal"], [";", ";", "equal"], ["}", "}", "equal"], ["\"", "\"", "equal"], [")", ")", "equal"], [";", ";", "equal"], ["}", "}", "equal"], ["}", "}", "equal"], [")", ")", "equal"], [";", ";", "equal"], ["}", "}", "equal"]], "src_desc_tokens": ["Delegates", "load", "<con>", "Class", "to", "org", "<con>", ".", "<con>", "hotswap", "<con>", ".", "<con>", "agent", "<con>", ".", "<con>", "plugin", "<con>", ".", "<con>", "deltaspike", "<con>", ".", "<con>", "proxy", "<con>", ".", "<con>", "Proxy", "<con>", "Class", "<con>", "Loading", "<con>", "Delegate", "<con>", ":", "<con>", ":", "<con>", "load", "<con>", "Class"], "dst_desc_tokens": ["Delegates", "load", "<con>", "Class", "to", "org", "<con>", ".", "<con>", "hotswap", "<con>", ".", "<con>", "agent", "<con>", ".", "<con>", "plugin", "<con>", ".", "<con>", "deltaspike", "<con>", ".", "<con>", "command", "<con>", ".", "<con>", "Proxy", "<con>", "Class", "<con>", "Loading", "<con>", "Delegate", "<con>", ":", "<con>", ":", "<con>", "load", "<con>", "Class"], "label": true}
{"idx": 3, "sample_id": 4484195, "full_name": "Azure/azure-sdk-for-java", "commit_id": "45a5bdd0509a7ea1dbebf4410a53c436461a0612", "src_method": "public VoidResponse abortCopyWithResponse(String copyId, Context context) {\n        return fileAsyncClient.abortCopyWithResponse(copyId, context).block();\n    }", "dst_method": "public VoidResponse abortCopyWithResponse(String copyId, Duration timeout, Context context) {\n        Mono<VoidResponse> response = fileAsyncClient.abortCopyWithResponse(copyId, context);\n        return Utility.blockWithOptionalTimeout(response, timeout);\n    }", "src_desc": "{@codesnippet com.azure.storage.file.fileClient.abortCopyWithResponse#string-Context}", "dst_desc": "{@codesnippet com.azure.storage.file.fileClient.abortCopyWithResponse#string-duration-context}", "code_change_seq": [["public", "public", "equal"], ["Void", "Void", "equal"], ["<con>", "<con>", "equal"], ["Response", "Response", "equal"], ["abort", "abort", "equal"], ["<con>", "<con>", "equal"], ["Copy", "Copy", "equal"], ["<con>", "<con>", "equal"], ["With", "With", "equal"], ["<con>", "<con>", "equal"], ["Response", "Response", "equal"], ["(", "(", "equal"], ["String", "String", "equal"], ["copy", "copy", "equal"], ["<con>", "<con>", "equal"], ["Id", "Id", "equal"], [",", ",", "equal"], ["", "Duration", "insert"], ["", "timeout", "insert"], ["", ",", "insert"], ["Context", "Context", "equal"], ["context", "context", "equal"], [")", ")", "equal"], ["{", "{", "equal"], ["return", "Mono", "replace"], ["", "<", "insert"], ["", "Void", "insert"], ["", "<con>", "insert"], ["", "Response", "insert"], ["", ">", "insert"], ["", "response", "insert"], ["", "=", "insert"], ["file", "file", "equal"], ["<con>", "<con>", "equal"], ["Async", "Async", "equal"], ["<con>", "<con>", "equal"], ["Client", "Client", "equal"], [".", ".", "equal"], ["abort", "abort", "equal"], ["<con>", "<con>", "equal"], ["Copy", "Copy", "equal"], ["<con>", "<con>", "equal"], ["With", "With", "equal"], ["<con>", "<con>", "equal"], ["Response", "Response", "equal"], ["(", "(", "equal"], ["copy", "copy", "equal"], ["<con>", "<con>", "equal"], ["Id", "Id", "equal"], [",", ",", "equal"], ["context", "context", "equal"], [")", ")", "equal"], ["", ";", "insert"], ["", "return", "insert"], ["", "Utility", "insert"], [".", ".", "equal"], ["block", "block", "equal"], ["", "<con>", "insert"], ["", "With", "insert"], ["", "<con>", "insert"], ["", "Optional", "insert"], ["", "<con>", "insert"], ["", "Timeout", "insert"], ["(", "(", "equal"], ["", "response", "insert"], ["", ",", "insert"], ["", "timeout", "insert"], [")", ")", "equal"], [";", ";", "equal"], ["}", "}", "equal"]], "src_desc_tokens": ["{", "<con>", "@", "<con>", "codesnippet", "com", "<con>", ".", "<con>", "azure", "<con>", ".", "<con>", "storage", "<con>", ".", "<con>", "file", "<con>", ".", "<con>", "file", "<con>", "Client", "<con>", ".", "<con>", "abort", "<con>", "Copy", "<con>", "With", "<con>", "Response", "<con>", "#", "<con>", "string", "<con>", "-", "<con>", "Context", "<con>", "}"], "dst_desc_tokens": ["{", "<con>", "@", "<con>", "codesnippet", "com", "<con>", ".", "<con>", "azure", "<con>", ".", "<con>", "storage", "<con>", ".", "<con>", "file", "<con>", ".", "<con>", "file", "<con>", "Client", "<con>", ".", "<con>", "abort", "<con>", "Copy", "<con>", "With", "<con>", "Response", "<con>", "#", "<con>", "string", "<con>", "-", "<con>", "duration", "<con>", "-", "<con>", "context", "<con>", "}"], "label": true}
{"idx": 0, "sample_id": 2443444, "full_name": "jersey/jersey", "commit_id": "7947149f959e6103a7a9cfc1906f943cd8c86090", "src_method": "public static InjectionManager createInjectionManager(String name, Binder... binders) {\n        return _injectionManager(name, null, binders);\n    }", "dst_method": "public static InjectionManager createInjectionManager(Binder binder) {\n        return lookupInjectionManagerFactory().create(binder);\n    }", "src_desc": "Create a {@link InjectionManager}.", "dst_desc": "Creates a {@link InjectionManager} with initial binder that is immediately registered.", "code_change_seq": [["public", "public", "equal"], ["static", "static", "equal"], ["Injection", "Injection", "equal"], ["<con>", "<con>", "equal"], ["Manager", "Manager", "equal"], ["create", "create", "equal"], ["<con>", "<con>", "equal"], ["Injection", "Injection", "equal"], ["<con>", "<con>", "equal"], ["Manager", "Manager", "equal"], ["(", "(", "equal"], ["String", "", "delete"], ["name", "", "delete"], [",", "", "delete"], ["Binder", "Binder", "equal"], ["...", "", "delete"], ["binders", "binder", "replace"], [")", ")", "equal"], ["{", "{", "equal"], ["return", "return", "equal"], ["_", "lookup", "replace"], ["<con>", "<con>", "equal"], ["injection", "Injection", "replace"], ["<con>", "<con>", "equal"], ["Manager", "Manager", "equal"], ["", "<con>", "insert"], ["", "Factory", "insert"], ["(", "(", "equal"], ["name", ")", "replace"], [",", ".", "replace"], ["null", "create", "replace"], [",", "(", "replace"], ["binders", "binder", "replace"], [")", ")", "equal"], [";", ";", "equal"], ["}", "}", "equal"]], "src_desc_tokens": ["Create", "a", "{", "<con>", "@", "<con>", "link", "Injection", "<con>", "Manager", "<con>", "}", "<con>", "."], "dst_desc_tokens": ["Creates", "a", "{", "<con>", "@", "<con>", "link", "Injection", "<con>", "Manager", "<con>", "}", "with", "initial", "binder", "that", "is", "immediately", "registered", "<con>", "."], "label": true}
{"idx": 2, "sample_id": 4470113, "full_name": "Azure/azure-sdk-for-java", "commit_id": "0c7b98449768de9d61397b0cc53ef05c234ff3ef", "src_method": "public Flux<FeedResponse<CosmosUserProperties>> readAllUsers(FeedOptions options) {\n        return getDocClientWrapper().readUsers(getLink(), options).map(response -> BridgeInternal.createFeedResponse(\n            CosmosUserProperties.getFromV2Results(response.getResults()), response.getResponseHeaders()));\n    }", "dst_method": "public CosmosContinuablePagedFlux<CosmosUserProperties> readAllUsers(FeedOptions options) {\n        return new CosmosContinuablePagedFlux<>(pagedFluxOptions -> {\n            setContinuationTokenAndMaxItemCount(pagedFluxOptions, options);\n            return getDocClientWrapper().readUsers(getLink(), options).map(response -> BridgeInternal.createFeedResponse(\n                CosmosUserProperties.getFromV2Results(response.getResults()), response.getResponseHeaders()));\n        });\n    }", "src_desc": "The {@link Flux} will\ncontain one or several feed response of the read cosmos users.", "dst_desc": "The {@link CosmosContinuablePagedFlux} will\ncontain one or several feed response of the read cosmos users.", "code_change_seq": [["public", "public", "equal"], ["Flux", "", "delete"], ["<", "", "delete"], ["Feed", "Cosmos", "replace"], ["<con>", "<con>", "equal"], ["Response", "Continuable", "replace"], ["", "<con>", "insert"], ["", "Paged", "insert"], ["", "<con>", "insert"], ["", "Flux", "insert"], ["<", "<", "equal"], ["Cosmos", "Cosmos", "equal"], ["<con>", "<con>", "equal"], ["User", "User", "equal"], ["<con>", "<con>", "equal"], ["Properties", "Properties", "equal"], [">", "", "delete"], [">", ">", "equal"], ["read", "read", "equal"], ["<con>", "<con>", "equal"], ["All", "All", "equal"], ["<con>", "<con>", "equal"], ["Users", "Users", "equal"], ["(", "(", "equal"], ["Feed", "Feed", "equal"], ["<con>", "<con>", "equal"], ["Options", "Options", "equal"], ["options", "options", "equal"], [")", ")", "equal"], ["{", "{", "equal"], ["", "return", "insert"], ["", "new", "insert"], ["", "Cosmos", "insert"], ["", "<con>", "insert"], ["", "Continuable", "insert"], ["", "<con>", "insert"], ["", "Paged", "insert"], ["", "<con>", "insert"], ["", "Flux", "insert"], ["", "<", "insert"], ["", ">", "insert"], ["", "(", "insert"], ["", "paged", "insert"], ["", "<con>", "insert"], ["", "Flux", "insert"], ["", "<con>", "insert"], ["", "Options", "insert"], ["", "->", "insert"], ["", "{", "insert"], ["", "set", "insert"], ["", "<con>", "insert"], ["", "Continuation", "insert"], ["", "<con>", "insert"], ["", "Token", "insert"], ["", "<con>", "insert"], ["", "And", "insert"], ["", "<con>", "insert"], ["", "Max", "insert"], ["", "<con>", "insert"], ["", "Item", "insert"], ["", "<con>", "insert"], ["", "Count", "insert"], ["", "(", "insert"], ["", "paged", "insert"], ["", "<con>", "insert"], ["", "Flux", "insert"], ["", "<con>", "insert"], ["", "Options", "insert"], ["", ",", "insert"], ["", "options", "insert"], ["", ")", "insert"], ["", ";", "insert"], ["return", "return", "equal"], ["get", "get", "equal"], ["<con>", "<con>", "equal"], ["Doc", "Doc", "equal"], ["<con>", "<con>", "equal"], ["Client", "Client", "equal"], ["<con>", "<con>", "equal"], ["Wrapper", "Wrapper", "equal"], ["(", "(", "equal"], [")", ")", "equal"], [".", ".", "equal"], ["read", "read", "equal"], ["<con>", "<con>", "equal"], ["Users", "Users", "equal"], ["(", "(", "equal"], ["get", "get", "equal"], ["<con>", "<con>", "equal"], ["Link", "Link", "equal"], ["(", "(", "equal"], [")", ")", "equal"], [",", ",", "equal"], ["options", "options", "equal"], [")", ")", "equal"], [".", ".", "equal"], ["map", "map", "equal"], ["(", "(", "equal"], ["response", "response", "equal"], ["->", "->", "equal"], ["Bridge", "Bridge", "equal"], ["<con>", "<con>", "equal"], ["Internal", "Internal", "equal"], [".", ".", "equal"], ["create", "create", "equal"], ["<con>", "<con>", "equal"], ["Feed", "Feed", "equal"], ["<con>", "<con>", "equal"], ["Response", "Response", "equal"], ["(", "(", "equal"], ["Cosmos", "Cosmos", "equal"], ["<con>", "<con>", "equal"], ["User", "User", "equal"], ["<con>", "<con>", "equal"], ["Properties", "Properties", "equal"], [".", ".", "equal"], ["get", "get", "equal"], ["<con>", "<con>", "equal"], ["From", "From", "equal"], ["<con>", "<con>", "equal"], ["V2", "V2", "equal"], ["<con>", "<con>", "equal"], ["results", "results", "equal"], ["(", "(", "equal"], ["response", "response", "equal"], [".", ".", "equal"], ["get", "get", "equal"], ["<con>", "<con>", "equal"], ["results", "results", "equal"], ["(", "(", "equal"], [")", ")", "equal"], [")", ")", "equal"], [",", ",", "equal"], ["response", "response", "equal"], [".", ".", "equal"], ["get", "get", "equal"], ["<con>", "<con>", "equal"], ["Response", "Response", "equal"], ["<con>", "<con>", "equal"], ["Headers", "Headers", "equal"], ["(", "(", "equal"], [")", ")", "equal"], [")", ")", "equal"], [")", ")", "equal"], [";", ";", "equal"], ["}", "}", "equal"], ["", ")", "insert"], ["", ";", "insert"], ["", "}", "insert"]], "src_desc_tokens": ["The", "{", "<con>", "@", "<con>", "link", "Flux", "<con>", "}", "will", "contain", "one", "or", "several", "feed", "response", "of", "the", "read", "cosmos", "users", "<con>", "."], "dst_desc_tokens": ["The", "{", "<con>", "@", "<con>", "link", "Cosmos", "<con>", "Continuable", "<con>", "Paged", "<con>", "Flux", "<con>", "}", "will", "contain", "one", "or", "several", "feed", "response", "of", "the", "read", "cosmos", "users", "<con>", "."], "label": true}
{"idx": 3, "sample_id": 4478865, "full_name": "Azure/azure-sdk-for-java", "commit_id": "4486ee01367850a4d96845886b58af4cedb63bff", "src_method": "public Response<Void> setPropertiesWithResponse(StorageServiceProperties properties, Duration timeout,\n        Context context) {\n        Mono<Response<Void>> response = client.setPropertiesWithResponse(properties, context);\n        return Utility.blockWithOptionalTimeout(response, timeout);\n    }", "dst_method": "public Response<Void> setPropertiesWithResponse(QueueServiceProperties properties, Duration timeout,\n        Context context) {\n        Mono<Response<Void>> response = client.setPropertiesWithResponse(properties, context);\n        return Utility.blockWithOptionalTimeout(response, timeout);\n    }", "src_desc": "To disable all CORS in the Queue service pass an empty list for {@link StorageServiceProperties#getCors()\nCORS}.", "dst_desc": "To disable all CORS in the Queue service pass an empty list for {@link QueueServiceProperties#getCors()\nCORS}.", "code_change_seq": [["public", "public", "equal"], ["Response", "Response", "equal"], ["<", "<", "equal"], ["Void", "Void", "equal"], [">", ">", "equal"], ["set", "set", "equal"], ["<con>", "<con>", "equal"], ["Properties", "Properties", "equal"], ["<con>", "<con>", "equal"], ["With", "With", "equal"], ["<con>", "<con>", "equal"], ["Response", "Response", "equal"], ["(", "(", "equal"], ["Storage", "Queue", "replace"], ["<con>", "<con>", "equal"], ["Service", "Service", "equal"], ["<con>", "<con>", "equal"], ["Properties", "Properties", "equal"], ["properties", "properties", "equal"], [",", ",", "equal"], ["Duration", "Duration", "equal"], ["timeout", "timeout", "equal"], [",", ",", "equal"], ["Context", "Context", "equal"], ["context", "context", "equal"], [")", ")", "equal"], ["{", "{", "equal"], ["Mono", "Mono", "equal"], ["<", "<", "equal"], ["Response", "Response", "equal"], ["<", "<", "equal"], ["Void", "Void", "equal"], [">", ">", "equal"], [">", ">", "equal"], ["response", "response", "equal"], ["=", "=", "equal"], ["client", "client", "equal"], [".", ".", "equal"], ["set", "set", "equal"], ["<con>", "<con>", "equal"], ["Properties", "Properties", "equal"], ["<con>", "<con>", "equal"], ["With", "With", "equal"], ["<con>", "<con>", "equal"], ["Response", "Response", "equal"], ["(", "(", "equal"], ["properties", "properties", "equal"], [",", ",", "equal"], ["context", "context", "equal"], [")", ")", "equal"], [";", ";", "equal"], ["return", "return", "equal"], ["Utility", "Utility", "equal"], [".", ".", "equal"], ["block", "block", "equal"], ["<con>", "<con>", "equal"], ["With", "With", "equal"], ["<con>", "<con>", "equal"], ["Optional", "Optional", "equal"], ["<con>", "<con>", "equal"], ["Timeout", "Timeout", "equal"], ["(", "(", "equal"], ["response", "response", "equal"], [",", ",", "equal"], ["timeout", "timeout", "equal"], [")", ")", "equal"], [";", ";", "equal"], ["}", "}", "equal"]], "src_desc_tokens": ["To", "disable", "all", "CORS", "in", "the", "Queue", "service", "pass", "an", "empty", "list", "for", "{", "<con>", "@", "<con>", "link", "Storage", "<con>", "Service", "<con>", "Properties", "<con>", "#", "<con>", "get", "<con>", "Cors", "<con>", "(", "<con>", ")", "CORS", "<con>", "}", "<con>", "."], "dst_desc_tokens": ["To", "disable", "all", "CORS", "in", "the", "Queue", "service", "pass", "an", "empty", "list", "for", "{", "<con>", "@", "<con>", "link", "Queue", "<con>", "Service", "<con>", "Properties", "<con>", "#", "<con>", "get", "<con>", "Cors", "<con>", "(", "<con>", ")", "CORS", "<con>", "}", "<con>", "."], "label": true}
{"idx": 11, "sample_id": 5441275, "full_name": "unofficial-openjdk/openjdk", "commit_id": "82717914de8cd0cc8fd4576f0e421948466bcfaf", "src_method": "public final void wait(long timeout, int nanos) throws InterruptedException {\n        if (timeout < 0) {\n            throw new IllegalArgumentException(\"timeout value is negative\");\n        }\n\n        if (nanos < 0 || nanos > 999999) {\n            throw new IllegalArgumentException(\n                                \"nanosecond timeout value out of range\");\n        }\n\n        if (nanos > 0) {\n            timeout++;\n        }\n\n        wait(timeout);\n    }", "dst_method": "public final void wait(long timeoutMillis, int nanos) throws InterruptedException {\n        if (timeoutMillis < 0) {\n            throw new IllegalArgumentException(\"timeoutMillis value is negative\");\n        }\n\n        if (nanos < 0 || nanos > 999999) {\n            throw new IllegalArgumentException(\n                                \"nanosecond timeout value out of range\");\n        }\n\n        if (nanos > 0) {\n            timeoutMillis++;\n        }\n\n        wait(timeoutMillis);\n    }", "src_desc": "If {@code timeout} and {@code nanos}\nare both zero, then real time is not taken into consideration and the\nthread waits until awakened by one of the other causes.", "dst_desc": "If {@code timeoutMillis} and {@code nanos}\nare both zero, then real time is not taken into consideration and the\nthread waits until awakened by one of the other causes.", "code_change_seq": [["public", "public", "equal"], ["final", "final", "equal"], ["void", "void", "equal"], ["wait", "wait", "equal"], ["(", "(", "equal"], ["long", "long", "equal"], ["timeout", "timeout", "equal"], ["", "<con>", "insert"], ["", "Millis", "insert"], [",", ",", "equal"], ["int", "int", "equal"], ["nanos", "nanos", "equal"], [")", ")", "equal"], ["throws", "throws", "equal"], ["Interrupted", "Interrupted", "equal"], ["<con>", "<con>", "equal"], ["Exception", "Exception", "equal"], ["{", "{", "equal"], ["if", "if", "equal"], ["(", "(", "equal"], ["timeout", "timeout", "equal"], ["", "<con>", "insert"], ["", "Millis", "insert"], ["<", "<", "equal"], ["0", "0", "equal"], [")", ")", "equal"], ["{", "{", "equal"], ["throw", "throw", "equal"], ["new", "new", "equal"], ["Illegal", "Illegal", "equal"], ["<con>", "<con>", "equal"], ["Argument", "Argument", "equal"], ["<con>", "<con>", "equal"], ["Exception", "Exception", "equal"], ["(", "(", "equal"], ["\"", "\"", "equal"], ["timeout", "timeout", "equal"], ["", "<con>", "insert"], ["", "Millis", "insert"], ["value", "value", "equal"], ["is", "is", "equal"], ["negative", "negative", "equal"], ["\"", "\"", "equal"], [")", ")", "equal"], [";", ";", "equal"], ["}", "}", "equal"], ["if", "if", "equal"], ["(", "(", "equal"], ["nanos", "nanos", "equal"], ["<", "<", "equal"], ["0", "0", "equal"], ["||", "||", "equal"], ["nanos", "nanos", "equal"], [">", ">", "equal"], ["999999", "999999", "equal"], [")", ")", "equal"], ["{", "{", "equal"], ["throw", "throw", "equal"], ["new", "new", "equal"], ["Illegal", "Illegal", "equal"], ["<con>", "<con>", "equal"], ["Argument", "Argument", "equal"], ["<con>", "<con>", "equal"], ["Exception", "Exception", "equal"], ["(", "(", "equal"], ["\"", "\"", "equal"], ["nanosecond", "nanosecond", "equal"], ["timeout", "timeout", "equal"], ["value", "value", "equal"], ["out", "out", "equal"], ["of", "of", "equal"], ["range", "range", "equal"], ["\"", "\"", "equal"], [")", ")", "equal"], [";", ";", "equal"], ["}", "}", "equal"], ["if", "if", "equal"], ["(", "(", "equal"], ["nanos", "nanos", "equal"], [">", ">", "equal"], ["0", "0", "equal"], [")", ")", "equal"], ["{", "{", "equal"], ["timeout", "timeout", "equal"], ["", "<con>", "insert"], ["", "Millis", "insert"], ["++", "++", "equal"], [";", ";", "equal"], ["}", "}", "equal"], ["wait", "wait", "equal"], ["(", "(", "equal"], ["timeout", "timeout", "equal"], ["", "<con>", "insert"], ["", "Millis", "insert"], [")", ")", "equal"], [";", ";", "equal"], ["}", "}", "equal"]], "src_desc_tokens": ["If", "{", "<con>", "@", "<con>", "code", "timeout", "<con>", "}", "and", "{", "<con>", "@", "<con>", "code", "nanos", "<con>", "}", "are", "both", "zero", "<con>", ",", "then", "real", "time", "is", "not", "taken", "into", "consideration", "and", "the", "thread", "waits", "until", "awakened", "by", "one", "of", "the", "other", "causes", "<con>", "."], "dst_desc_tokens": ["If", "{", "<con>", "@", "<con>", "code", "timeout", "<con>", "Millis", "<con>", "}", "and", "{", "<con>", "@", "<con>", "code", "nanos", "<con>", "}", "are", "both", "zero", "<con>", ",", "then", "real", "time", "is", "not", "taken", "into", "consideration", "and", "the", "thread", "waits", "until", "awakened", "by", "one", "of", "the", "other", "causes", "<con>", "."], "label": true}
{"idx": 0, "sample_id": 23303, "full_name": "adempiere/adempiere", "commit_id": "a1cb4ea65411955663074a759d0f374d1d9347be", "src_method": "protected boolean isProjectAccounting() {\n\t\treturn isProjectAccounting;\n\t}", "dst_method": "protected boolean isUseProjectDimension() {\n\t\treturn isUseProjectDimension;\n\t}", "src_desc": "Getter Parameter Value for isProjectAccounting", "dst_desc": "Getter Parameter Value for Project Accounting", "code_change_seq": [["protected", "protected", "equal"], ["boolean", "boolean", "equal"], ["is", "is", "equal"], ["", "<con>", "insert"], ["", "Use", "insert"], ["<con>", "<con>", "equal"], ["Project", "Project", "equal"], ["<con>", "<con>", "equal"], ["Accounting", "Dimension", "replace"], ["(", "(", "equal"], [")", ")", "equal"], ["{", "{", "equal"], ["return", "return", "equal"], ["is", "is", "equal"], ["", "<con>", "insert"], ["", "Use", "insert"], ["<con>", "<con>", "equal"], ["Project", "Project", "equal"], ["<con>", "<con>", "equal"], ["Accounting", "Dimension", "replace"], [";", ";", "equal"], ["}", "}", "equal"]], "src_desc_tokens": ["Getter", "Parameter", "Value", "for", "is", "<con>", "Project", "<con>", "Accounting"], "dst_desc_tokens": ["Getter", "Parameter", "Value", "for", "Project", "Accounting"], "label": true}
{"idx": 0, "sample_id": 2017735, "full_name": "google/closure-compiler", "commit_id": "393ec71775db7c35e4d3abf4b9eea85d97a54134", "src_method": "private Iterable<ObjectType> getSecondaryParentObjects() {\n    if (parentSource == null) {\n      return ImmutableList.of();\n    }\n    return parentSource.getCtorExtendedInterfaces();\n  }", "dst_method": "private Iterable<ObjectType> getSecondaryParentObjects() {\n    if (parentSource == null) {\n      return ImmutableList.of();\n    }\n    if (parentSource.getConstructor() != null && parentSource.getConstructor().isAbstract()) {\n      return parentSource.getConstructor().getOwnImplementedInterfaces();\n    }\n    return parentSource.getCtorExtendedInterfaces();\n  }", "src_desc": "Returns the secondary parents of this property map, for interfaces that\nneed multiple inheritance.", "dst_desc": "Returns the secondary parents of this property map, for interfaces that need multiple\ninheritance or for interfaces of abstract classes.", "code_change_seq": [["private", "private", "equal"], ["Iterable", "Iterable", "equal"], ["<", "<", "equal"], ["Object", "Object", "equal"], ["<con>", "<con>", "equal"], ["Type", "Type", "equal"], [">", ">", "equal"], ["get", "get", "equal"], ["<con>", "<con>", "equal"], ["Secondary", "Secondary", "equal"], ["<con>", "<con>", "equal"], ["Parent", "Parent", "equal"], ["<con>", "<con>", "equal"], ["Objects", "Objects", "equal"], ["(", "(", "equal"], [")", ")", "equal"], ["{", "{", "equal"], ["if", "if", "equal"], ["(", "(", "equal"], ["parent", "parent", "equal"], ["<con>", "<con>", "equal"], ["Source", "Source", "equal"], ["==", "==", "equal"], ["null", "null", "equal"], [")", ")", "equal"], ["{", "{", "equal"], ["return", "return", "equal"], ["Immutable", "Immutable", "equal"], ["<con>", "<con>", "equal"], ["List", "List", "equal"], [".", ".", "equal"], ["of", "of", "equal"], ["(", "(", "equal"], [")", ")", "equal"], [";", ";", "equal"], ["}", "}", "equal"], ["", "if", "insert"], ["", "(", "insert"], ["", "parent", "insert"], ["", "<con>", "insert"], ["", "Source", "insert"], ["", ".", "insert"], ["", "get", "insert"], ["", "<con>", "insert"], ["", "Constructor", "insert"], ["", "(", "insert"], ["", ")", "insert"], ["", "!=", "insert"], ["", "null", "insert"], ["", "&&", "insert"], ["", "parent", "insert"], ["", "<con>", "insert"], ["", "Source", "insert"], ["", ".", "insert"], ["", "get", "insert"], ["", "<con>", "insert"], ["", "Constructor", "insert"], ["", "(", "insert"], ["", ")", "insert"], ["", ".", "insert"], ["", "is", "insert"], ["", "<con>", "insert"], ["", "Abstract", "insert"], ["", "(", "insert"], ["", ")", "insert"], ["", ")", "insert"], ["", "{", "insert"], ["", "return", "insert"], ["", "parent", "insert"], ["", "<con>", "insert"], ["", "Source", "insert"], ["", ".", "insert"], ["", "get", "insert"], ["", "<con>", "insert"], ["", "Constructor", "insert"], ["", "(", "insert"], ["", ")", "insert"], ["", ".", "insert"], ["", "get", "insert"], ["", "<con>", "insert"], ["", "Own", "insert"], ["", "<con>", "insert"], ["", "Implemented", "insert"], ["", "<con>", "insert"], ["", "Interfaces", "insert"], ["", "(", "insert"], ["", ")", "insert"], ["", ";", "insert"], ["", "}", "insert"], ["return", "return", "equal"], ["parent", "parent", "equal"], ["<con>", "<con>", "equal"], ["Source", "Source", "equal"], [".", ".", "equal"], ["get", "get", "equal"], ["<con>", "<con>", "equal"], ["Ctor", "Ctor", "equal"], ["<con>", "<con>", "equal"], ["Extended", "Extended", "equal"], ["<con>", "<con>", "equal"], ["Interfaces", "Interfaces", "equal"], ["(", "(", "equal"], [")", ")", "equal"], [";", ";", "equal"], ["}", "}", "equal"]], "src_desc_tokens": ["Returns", "the", "secondary", "parents", "of", "this", "property", "map", "<con>", ",", "for", "interfaces", "that", "need", "multiple", "inheritance", "<con>", "."], "dst_desc_tokens": ["Returns", "the", "secondary", "parents", "of", "this", "property", "map", "<con>", ",", "for", "interfaces", "that", "need", "multiple", "inheritance", "or", "for", "interfaces", "of", "abstract", "classes", "<con>", "."], "label": true}
{"idx": 2, "sample_id": 5845329, "full_name": "JetBrains/android", "commit_id": "666069caadbc2b6847a807349792e9c65d6b4c88", "src_method": "@NotNull\n  public static File getGradleBuildFilePath(@NotNull File dirPath) {\n    return new File(dirPath, FN_BUILD_GRADLE);\n  }", "dst_method": "@NotNull\n  public static File getGradleBuildFilePath(@NotNull File dirPath) {\n    File defaultBuildFile = new File(dirPath, FN_BUILD_GRADLE);\n    if (!defaultBuildFile.isFile()) {\n      File ktsBuildFile = new File(dirPath, FN_BUILD_GRADLE_KTS);\n      if (ktsBuildFile.isFile()) {\n        return ktsBuildFile;\n      }\n    }\n    return defaultBuildFile;\n  }", "src_desc": "Please note that a build.gradle file\nmay not exist at the returned path.", "dst_desc": "Please note that the build.gradle file may not exist at the returned path.", "code_change_seq": [["@", "@", "equal"], ["Not", "Not", "equal"], ["<con>", "<con>", "equal"], ["Null", "Null", "equal"], ["public", "public", "equal"], ["static", "static", "equal"], ["File", "File", "equal"], ["get", "get", "equal"], ["<con>", "<con>", "equal"], ["Gradle", "Gradle", "equal"], ["<con>", "<con>", "equal"], ["Build", "Build", "equal"], ["<con>", "<con>", "equal"], ["File", "File", "equal"], ["<con>", "<con>", "equal"], ["Path", "Path", "equal"], ["(", "(", "equal"], ["@", "@", "equal"], ["Not", "Not", "equal"], ["<con>", "<con>", "equal"], ["Null", "Null", "equal"], ["File", "File", "equal"], ["dir", "dir", "equal"], ["<con>", "<con>", "equal"], ["Path", "Path", "equal"], [")", ")", "equal"], ["{", "{", "equal"], ["return", "File", "replace"], ["", "default", "insert"], ["", "<con>", "insert"], ["", "Build", "insert"], ["", "<con>", "insert"], ["", "File", "insert"], ["", "=", "insert"], ["new", "new", "equal"], ["File", "File", "equal"], ["(", "(", "equal"], ["dir", "dir", "equal"], ["<con>", "<con>", "equal"], ["Path", "Path", "equal"], [",", ",", "equal"], ["FN", "FN", "equal"], ["<con>", "<con>", "equal"], ["_", "_", "equal"], ["<con>", "<con>", "equal"], ["BUILD", "BUILD", "equal"], ["<con>", "<con>", "equal"], ["_", "_", "equal"], ["<con>", "<con>", "equal"], ["GRADLE", "GRADLE", "equal"], [")", ")", "equal"], [";", ";", "equal"], ["", "if", "insert"], ["", "(", "insert"], ["", "!", "insert"], ["", "default", "insert"], ["", "<con>", "insert"], ["", "Build", "insert"], ["", "<con>", "insert"], ["", "File", "insert"], ["", ".", "insert"], ["", "is", "insert"], ["", "<con>", "insert"], ["", "File", "insert"], ["", "(", "insert"], ["", ")", "insert"], ["", ")", "insert"], ["", "{", "insert"], ["", "File", "insert"], ["", "kts", "insert"], ["", "<con>", "insert"], ["", "Build", "insert"], ["", "<con>", "insert"], ["", "File", "insert"], ["", "=", "insert"], ["", "new", "insert"], ["", "File", "insert"], ["", "(", "insert"], ["", "dir", "insert"], ["", "<con>", "insert"], ["", "Path", "insert"], ["", ",", "insert"], ["", "FN", "insert"], ["", "<con>", "insert"], ["", "_", "insert"], ["", "<con>", "insert"], ["", "BUILD", "insert"], ["", "<con>", "insert"], ["", "_", "insert"], ["", "<con>", "insert"], ["", "GRADLE", "insert"], ["", "<con>", "insert"], ["", "_", "insert"], ["", "<con>", "insert"], ["", "KTS", "insert"], ["", ")", "insert"], ["", ";", "insert"], ["", "if", "insert"], ["", "(", "insert"], ["", "kts", "insert"], ["", "<con>", "insert"], ["", "Build", "insert"], ["", "<con>", "insert"], ["", "File", "insert"], ["", ".", "insert"], ["", "is", "insert"], ["", "<con>", "insert"], ["", "File", "insert"], ["", "(", "insert"], ["", ")", "insert"], ["", ")", "insert"], ["", "{", "insert"], ["", "return", "insert"], ["", "kts", "insert"], ["", "<con>", "insert"], ["", "Build", "insert"], ["", "<con>", "insert"], ["", "File", "insert"], ["", ";", "insert"], ["}", "}", "equal"], ["", "}", "insert"], ["", "return", "insert"], ["", "default", "insert"], ["", "<con>", "insert"], ["", "Build", "insert"], ["", "<con>", "insert"], ["", "File", "insert"], ["", ";", "insert"], ["", "}", "insert"]], "src_desc_tokens": ["Please", "note", "that", "a", "build", "<con>", ".", "<con>", "gradle", "file", "may", "not", "exist", "at", "the", "returned", "path", "<con>", "."], "dst_desc_tokens": ["Please", "note", "that", "the", "build", "<con>", ".", "<con>", "gradle", "file", "may", "not", "exist", "at", "the", "returned", "path", "<con>", "."], "label": true}
{"idx": 0, "sample_id": 5630307, "full_name": "watson-developer-cloud/java-sdk", "commit_id": "c44118e6766c0927c12a84f79c78197ae886b253", "src_method": "public void setPassword(final String password) {\n    this.password = password;\n  }", "dst_method": "public Builder password(String password) {\n      this.password = password;\n      return this;\n    }", "src_desc": "Sets the password.", "dst_desc": "Set the password.", "code_change_seq": [["public", "public", "equal"], ["void", "Builder", "replace"], ["set", "", "delete"], ["<con>", "", "delete"], ["Password", "password", "replace"], ["(", "(", "equal"], ["final", "", "delete"], ["String", "String", "equal"], ["password", "password", "equal"], [")", ")", "equal"], ["{", "{", "equal"], ["this", "this", "equal"], [".", ".", "equal"], ["password", "password", "equal"], ["=", "=", "equal"], ["password", "password", "equal"], [";", ";", "equal"], ["", "return", "insert"], ["", "this", "insert"], ["", ";", "insert"], ["}", "}", "equal"]], "src_desc_tokens": ["Sets", "the", "password", "<con>", "."], "dst_desc_tokens": ["Set", "the", "password", "<con>", "."], "label": true}
{"idx": 2, "sample_id": 2544923, "full_name": "JOML-CI/JOML", "commit_id": "efad7e910edfb265ca1f3c46415446ad71de0932", "src_method": "public Matrix4d setTranslation(Vector3d xyz) {\r\n        return setTranslation(xyz.x, xyz.y, xyz.z);\r\n    }", "dst_method": "public Matrix4d setTranslation(Vector3dc xyz) {\r\n        return setTranslation(xyz.x(), xyz.y(), xyz.z());\r\n    }", "src_desc": "To apply a translation, use {@link #translate(Vector3d)}.", "dst_desc": "To apply a translation, use {@link #translate(Vector3dc)}.", "code_change_seq": [["public", "public", "equal"], ["Matrix4d", "Matrix4d", "equal"], ["set", "set", "equal"], ["<con>", "<con>", "equal"], ["Translation", "Translation", "equal"], ["(", "(", "equal"], ["Vector3d", "Vector3dc", "replace"], ["xyz", "xyz", "equal"], [")", ")", "equal"], ["{", "{", "equal"], ["return", "return", "equal"], ["set", "set", "equal"], ["<con>", "<con>", "equal"], ["Translation", "Translation", "equal"], ["(", "(", "equal"], ["xyz", "xyz", "equal"], [".", ".", "equal"], ["x", "x", "equal"], ["", "(", "insert"], ["", ")", "insert"], [",", ",", "equal"], ["xyz", "xyz", "equal"], [".", ".", "equal"], ["y", "y", "equal"], ["", "(", "insert"], ["", ")", "insert"], [",", ",", "equal"], ["xyz", "xyz", "equal"], [".", ".", "equal"], ["z", "z", "equal"], ["", "(", "insert"], ["", ")", "insert"], [")", ")", "equal"], [";", ";", "equal"], ["}", "}", "equal"]], "src_desc_tokens": ["To", "apply", "a", "translation", "<con>", ",", "use", "{", "<con>", "@", "<con>", "link", "#", "<con>", "translate", "<con>", "(", "<con>", "Vector3d", "<con>", ")", "<con>", "}", "<con>", "."], "dst_desc_tokens": ["To", "apply", "a", "translation", "<con>", ",", "use", "{", "<con>", "@", "<con>", "link", "#", "<con>", "translate", "<con>", "(", "<con>", "Vector3dc", "<con>", ")", "<con>", "}", "<con>", "."], "label": true}
{"idx": 1, "sample_id": 5321662, "full_name": "spring-projects/spring-framework", "commit_id": "86c861516d55c69bae0150271c1a10d40afa726e", "src_method": "public PathMatchConfigurer addPathPrefix(String prefix, HandlerTypePredicate predicate) {\n\t\tthis.pathPrefixes = this.pathPrefixes == null ? new LinkedHashMap<>() : this.pathPrefixes;\n\t\tthis.pathPrefixes.put(prefix, predicate);\n\t\treturn this;\n\t}", "dst_method": "public PathMatchConfigurer addPathPrefix(String prefix, Predicate<Class<?>> predicate) {\n\t\tthis.pathPrefixes = this.pathPrefixes == null ? new LinkedHashMap<>() : this.pathPrefixes;\n\t\tthis.pathPrefixes.put(prefix, predicate);\n\t\treturn this;\n\t}", "src_desc": "Prefixes are used to enrich the mappings of every {@code @RequestMapping}\nmethod whose controller type is matched by the corresponding\n{@link HandlerTypePredicate}.", "dst_desc": "Prefixes are used to enrich the mappings of every {@code @RequestMapping}\nmethod whose controller type is matched by the corresponding\n{@code Predicate}.", "code_change_seq": [["public", "public", "equal"], ["Path", "Path", "equal"], ["<con>", "<con>", "equal"], ["Match", "Match", "equal"], ["<con>", "<con>", "equal"], ["Configurer", "Configurer", "equal"], ["add", "add", "equal"], ["<con>", "<con>", "equal"], ["Path", "Path", "equal"], ["<con>", "<con>", "equal"], ["Prefix", "Prefix", "equal"], ["(", "(", "equal"], ["String", "String", "equal"], ["prefix", "prefix", "equal"], [",", ",", "equal"], ["Handler", "", "delete"], ["<con>", "", "delete"], ["Type", "", "delete"], ["<con>", "", "delete"], ["Predicate", "Predicate", "equal"], ["", "<", "insert"], ["", "Class", "insert"], ["", "<", "insert"], ["", "?", "insert"], ["", ">", "insert"], ["", ">", "insert"], ["predicate", "predicate", "equal"], [")", ")", "equal"], ["{", "{", "equal"], ["this", "this", "equal"], [".", ".", "equal"], ["path", "path", "equal"], ["<con>", "<con>", "equal"], ["Prefixes", "Prefixes", "equal"], ["=", "=", "equal"], ["this", "this", "equal"], [".", ".", "equal"], ["path", "path", "equal"], ["<con>", "<con>", "equal"], ["Prefixes", "Prefixes", "equal"], ["==", "==", "equal"], ["null", "null", "equal"], ["?", "?", "equal"], ["new", "new", "equal"], ["Linked", "Linked", "equal"], ["<con>", "<con>", "equal"], ["Hash", "Hash", "equal"], ["<con>", "<con>", "equal"], ["Map", "Map", "equal"], ["<", "<", "equal"], [">", ">", "equal"], ["(", "(", "equal"], [")", ")", "equal"], [":", ":", "equal"], ["this", "this", "equal"], [".", ".", "equal"], ["path", "path", "equal"], ["<con>", "<con>", "equal"], ["Prefixes", "Prefixes", "equal"], [";", ";", "equal"], ["this", "this", "equal"], [".", ".", "equal"], ["path", "path", "equal"], ["<con>", "<con>", "equal"], ["Prefixes", "Prefixes", "equal"], [".", ".", "equal"], ["put", "put", "equal"], ["(", "(", "equal"], ["prefix", "prefix", "equal"], [",", ",", "equal"], ["predicate", "predicate", "equal"], [")", ")", "equal"], [";", ";", "equal"], ["return", "return", "equal"], ["this", "this", "equal"], [";", ";", "equal"], ["}", "}", "equal"]], "src_desc_tokens": ["Prefixes", "are", "used", "to", "enrich", "the", "mappings", "of", "every", "{", "<con>", "@", "<con>", "code", "@", "<con>", "Request", "<con>", "Mapping", "<con>", "}", "method", "whose", "controller", "type", "is", "matched", "by", "the", "corresponding", "{", "<con>", "@", "<con>", "link", "Handler", "<con>", "Type", "<con>", "Predicate", "<con>", "}", "<con>", "."], "dst_desc_tokens": ["Prefixes", "are", "used", "to", "enrich", "the", "mappings", "of", "every", "{", "<con>", "@", "<con>", "code", "@", "<con>", "Request", "<con>", "Mapping", "<con>", "}", "method", "whose", "controller", "type", "is", "matched", "by", "the", "corresponding", "{", "<con>", "@", "<con>", "code", "Predicate", "<con>", "}", "<con>", "."], "label": true}
{"idx": 0, "sample_id": 3037775, "full_name": "opennetworkinglab/onos", "commit_id": "cc0012423b77cd2f4a77ecd10eecce25e28ed06f", "src_method": "@Test\n    public void resilencyTest11() {\n        build4RouterTopo(true, false, false, false, 10);\n\n        List<Constraint> constraints = new LinkedList<Constraint>();\n        CostConstraint costConstraint = new CostConstraint(COST);\n        constraints.add(costConstraint);\n        PceBandwidthConstraint localBwConst = new PceBandwidthConstraint(Bandwidth.bps(10));\n        constraints.add(localBwConst);\n\n        //Setup the path , tunnel created\n        boolean result = pceManager.setupPath(D1.deviceId(), D4.deviceId(), \"T123\",\n                constraints, WITH_SIGNALLING, null);\n        assertThat(result, is(true));\n\n        List<Event> reasons = new LinkedList<>();\n        LinkEvent linkEvent = new LinkEvent(LinkEvent.Type.LINK_REMOVED, link1);\n        reasons.add(linkEvent);\n        linkEvent = new LinkEvent(LinkEvent.Type.LINK_REMOVED, link2);\n        reasons.add(linkEvent);\n\n        final TopologyEvent event = new TopologyEvent(\n                TopologyEvent.Type.TOPOLOGY_CHANGED,\n                topology,\n                reasons);\n\n        //Change Topology : remove device2 , link1 and link2\n        Set<TopologyEdge> tempEdges = new HashSet<>();\n        tempEdges.add(new DefaultTopologyEdge(D1, D2, link1));\n        tempEdges.add(new DefaultTopologyEdge(D2, D4, link2));\n        Set<TopologyVertex> tempVertexes = new HashSet<>();\n        tempVertexes.add(D2);\n        topologyService.changeInTopology(getGraph(tempVertexes, tempEdges));\n        listener.event(event);\n\n        List<Link> links = new LinkedList<>();\n        links.add(link3);\n        links.add(link4);\n\n        Path path = tunnelService.queryAllTunnels().iterator().next().path();\n\n        //Path is D1-D3-D4\n        assertThat(path.links(), is(links));\n        assertThat(path.cost(), is((double) 180));\n    }", "dst_method": "@Test\n    public void resiliencyTest11() {\n        build4RouterTopo(true, false, false, false, 10);\n\n        List<Constraint> constraints = new LinkedList<Constraint>();\n        CostConstraint costConstraint = new CostConstraint(COST);\n        constraints.add(costConstraint);\n        PceBandwidthConstraint localBwConst = new PceBandwidthConstraint(Bandwidth.bps(10));\n        constraints.add(localBwConst);\n\n        //Setup the path , tunnel created\n        boolean result = pceManager.setupPath(D1.deviceId(), D4.deviceId(), \"T123\",\n                constraints, WITH_SIGNALLING, null);\n        assertThat(result, is(true));\n\n        List<Event> reasons = new LinkedList<>();\n        LinkEvent linkEvent = new LinkEvent(LinkEvent.Type.LINK_REMOVED, link1);\n        reasons.add(linkEvent);\n        linkEvent = new LinkEvent(LinkEvent.Type.LINK_REMOVED, link2);\n        reasons.add(linkEvent);\n\n        final TopologyEvent event = new TopologyEvent(\n                TopologyEvent.Type.TOPOLOGY_CHANGED,\n                topology,\n                reasons);\n\n        //Change Topology : remove device2 , link1 and link2\n        Set<TopologyEdge> tempEdges = new HashSet<>();\n        tempEdges.add(new DefaultTopologyEdge(D1, D2, link1));\n        tempEdges.add(new DefaultTopologyEdge(D2, D4, link2));\n        Set<TopologyVertex> tempVertexes = new HashSet<>();\n        tempVertexes.add(D2);\n        topologyService.changeInTopology(getGraph(tempVertexes, tempEdges));\n        listener.event(event);\n\n        List<Link> links = new LinkedList<>();\n        links.add(link3);\n        links.add(link4);\n\n        Path path = tunnelService.queryAllTunnels().iterator().next().path();\n\n        //Path is D1-D3-D4\n        assertThat(path.links(), is(links));\n        assertThat(path.weight(), is(ScalarWeight.toWeight(180.0)));\n    }", "src_desc": "Tests resilency when D2 device availability is changed.", "dst_desc": "Tests resiliency when D2 device availability is changed.", "code_change_seq": [["@", "@", "equal"], ["Test", "Test", "equal"], ["public", "public", "equal"], ["void", "void", "equal"], ["resilency", "resiliency", "replace"], ["<con>", "<con>", "equal"], ["Test11", "Test11", "equal"], ["(", "(", "equal"], [")", ")", "equal"], ["{", "{", "equal"], ["build4", "build4", "equal"], ["<con>", "<con>", "equal"], ["Router", "Router", "equal"], ["<con>", "<con>", "equal"], ["Topo", "Topo", "equal"], ["(", "(", "equal"], ["true", "true", "equal"], [",", ",", "equal"], ["false", "false", "equal"], [",", ",", "equal"], ["false", "false", "equal"], [",", ",", "equal"], ["false", "false", "equal"], [",", ",", "equal"], ["10", "10", "equal"], [")", ")", "equal"], [";", ";", "equal"], ["List", "List", "equal"], ["<", "<", "equal"], ["Constraint", "Constraint", "equal"], [">", ">", "equal"], ["constraints", "constraints", "equal"], ["=", "=", "equal"], ["new", "new", "equal"], ["Linked", "Linked", "equal"], ["<con>", "<con>", "equal"], ["List", "List", "equal"], ["<", "<", "equal"], ["Constraint", "Constraint", "equal"], [">", ">", "equal"], ["(", "(", "equal"], [")", ")", "equal"], [";", ";", "equal"], ["Cost", "Cost", "equal"], ["<con>", "<con>", "equal"], ["Constraint", "Constraint", "equal"], ["cost", "cost", "equal"], ["<con>", "<con>", "equal"], ["Constraint", "Constraint", "equal"], ["=", "=", "equal"], ["new", "new", "equal"], ["Cost", "Cost", "equal"], ["<con>", "<con>", "equal"], ["Constraint", "Constraint", "equal"], ["(", "(", "equal"], ["COST", "COST", "equal"], [")", ")", "equal"], [";", ";", "equal"], ["constraints", "constraints", "equal"], [".", ".", "equal"], ["add", "add", "equal"], ["(", "(", "equal"], ["cost", "cost", "equal"], ["<con>", "<con>", "equal"], ["Constraint", "Constraint", "equal"], [")", ")", "equal"], [";", ";", "equal"], ["Pce", "Pce", "equal"], ["<con>", "<con>", "equal"], ["Bandwidth", "Bandwidth", "equal"], ["<con>", "<con>", "equal"], ["Constraint", "Constraint", "equal"], ["local", "local", "equal"], ["<con>", "<con>", "equal"], ["Bw", "Bw", "equal"], ["<con>", "<con>", "equal"], ["Const", "Const", "equal"], ["=", "=", "equal"], ["new", "new", "equal"], ["Pce", "Pce", "equal"], ["<con>", "<con>", "equal"], ["Bandwidth", "Bandwidth", "equal"], ["<con>", "<con>", "equal"], ["Constraint", "Constraint", "equal"], ["(", "(", "equal"], ["Bandwidth", "Bandwidth", "equal"], [".", ".", "equal"], ["bps", "bps", "equal"], ["(", "(", "equal"], ["10", "10", "equal"], [")", ")", "equal"], [")", ")", "equal"], [";", ";", "equal"], ["constraints", "constraints", "equal"], [".", ".", "equal"], ["add", "add", "equal"], ["(", "(", "equal"], ["local", "local", "equal"], ["<con>", "<con>", "equal"], ["Bw", "Bw", "equal"], ["<con>", "<con>", "equal"], ["Const", "Const", "equal"], [")", ")", "equal"], [";", ";", "equal"], ["boolean", "boolean", "equal"], ["result", "result", "equal"], ["=", "=", "equal"], ["pce", "pce", "equal"], ["<con>", "<con>", "equal"], ["Manager", "Manager", "equal"], [".", ".", "equal"], ["setup", "setup", "equal"], ["<con>", "<con>", "equal"], ["Path", "Path", "equal"], ["(", "(", "equal"], ["D1", "D1", "equal"], [".", ".", "equal"], ["device", "device", "equal"], ["<con>", "<con>", "equal"], ["Id", "Id", "equal"], ["(", "(", "equal"], [")", ")", "equal"], [",", ",", "equal"], ["D4", "D4", "equal"], [".", ".", "equal"], ["device", "device", "equal"], ["<con>", "<con>", "equal"], ["Id", "Id", "equal"], ["(", "(", "equal"], [")", ")", "equal"], [",", ",", "equal"], ["\"", "\"", "equal"], ["T123", "T123", "equal"], ["\"", "\"", "equal"], [",", ",", "equal"], ["constraints", "constraints", "equal"], [",", ",", "equal"], ["WITH", "WITH", "equal"], ["<con>", "<con>", "equal"], ["_", "_", "equal"], ["<con>", "<con>", "equal"], ["SIGNALLING", "SIGNALLING", "equal"], [",", ",", "equal"], ["null", "null", "equal"], [")", ")", "equal"], [";", ";", "equal"], ["assert", "assert", "equal"], ["<con>", "<con>", "equal"], ["That", "That", "equal"], ["(", "(", "equal"], ["result", "result", "equal"], [",", ",", "equal"], ["is", "is", "equal"], ["(", "(", "equal"], ["true", "true", "equal"], [")", ")", "equal"], [")", ")", "equal"], [";", ";", "equal"], ["List", "List", "equal"], ["<", "<", "equal"], ["Event", "Event", "equal"], [">", ">", "equal"], ["reasons", "reasons", "equal"], ["=", "=", "equal"], ["new", "new", "equal"], ["Linked", "Linked", "equal"], ["<con>", "<con>", "equal"], ["List", "List", "equal"], ["<", "<", "equal"], [">", ">", "equal"], ["(", "(", "equal"], [")", ")", "equal"], [";", ";", "equal"], ["Link", "Link", "equal"], ["<con>", "<con>", "equal"], ["Event", "Event", "equal"], ["link", "link", "equal"], ["<con>", "<con>", "equal"], ["Event", "Event", "equal"], ["=", "=", "equal"], ["new", "new", "equal"], ["Link", "Link", "equal"], ["<con>", "<con>", "equal"], ["Event", "Event", "equal"], ["(", "(", "equal"], ["Link", "Link", "equal"], ["<con>", "<con>", "equal"], ["Event", "Event", "equal"], [".", ".", "equal"], ["Type", "Type", "equal"], [".", ".", "equal"], ["LINK", "LINK", "equal"], ["<con>", "<con>", "equal"], ["_", "_", "equal"], ["<con>", "<con>", "equal"], ["REMOVED", "REMOVED", "equal"], [",", ",", "equal"], ["link1", "link1", "equal"], [")", ")", "equal"], [";", ";", "equal"], ["reasons", "reasons", "equal"], [".", ".", "equal"], ["add", "add", "equal"], ["(", "(", "equal"], ["link", "link", "equal"], ["<con>", "<con>", "equal"], ["Event", "Event", "equal"], [")", ")", "equal"], [";", ";", "equal"], ["link", "link", "equal"], ["<con>", "<con>", "equal"], ["Event", "Event", "equal"], ["=", "=", "equal"], ["new", "new", "equal"], ["Link", "Link", "equal"], ["<con>", "<con>", "equal"], ["Event", "Event", "equal"], ["(", "(", "equal"], ["Link", "Link", "equal"], ["<con>", "<con>", "equal"], ["Event", "Event", "equal"], [".", ".", "equal"], ["Type", "Type", "equal"], [".", ".", "equal"], ["LINK", "LINK", "equal"], ["<con>", "<con>", "equal"], ["_", "_", "equal"], ["<con>", "<con>", "equal"], ["REMOVED", "REMOVED", "equal"], [",", ",", "equal"], ["link2", "link2", "equal"], [")", ")", "equal"], [";", ";", "equal"], ["reasons", "reasons", "equal"], [".", ".", "equal"], ["add", "add", "equal"], ["(", "(", "equal"], ["link", "link", "equal"], ["<con>", "<con>", "equal"], ["Event", "Event", "equal"], [")", ")", "equal"], [";", ";", "equal"], ["final", "final", "equal"], ["Topology", "Topology", "equal"], ["<con>", "<con>", "equal"], ["Event", "Event", "equal"], ["event", "event", "equal"], ["=", "=", "equal"], ["new", "new", "equal"], ["Topology", "Topology", "equal"], ["<con>", "<con>", "equal"], ["Event", "Event", "equal"], ["(", "(", "equal"], ["Topology", "Topology", "equal"], ["<con>", "<con>", "equal"], ["Event", "Event", "equal"], [".", ".", "equal"], ["Type", "Type", "equal"], [".", ".", "equal"], ["TOPOLOGY", "TOPOLOGY", "equal"], ["<con>", "<con>", "equal"], ["_", "_", "equal"], ["<con>", "<con>", "equal"], ["CHANGED", "CHANGED", "equal"], [",", ",", "equal"], ["topology", "topology", "equal"], [",", ",", "equal"], ["reasons", "reasons", "equal"], [")", ")", "equal"], [";", ";", "equal"], ["Set", "Set", "equal"], ["<", "<", "equal"], ["Topology", "Topology", "equal"], ["<con>", "<con>", "equal"], ["Edge", "Edge", "equal"], [">", ">", "equal"], ["temp", "temp", "equal"], ["<con>", "<con>", "equal"], ["Edges", "Edges", "equal"], ["=", "=", "equal"], ["new", "new", "equal"], ["Hash", "Hash", "equal"], ["<con>", "<con>", "equal"], ["Set", "Set", "equal"], ["<", "<", "equal"], [">", ">", "equal"], ["(", "(", "equal"], [")", ")", "equal"], [";", ";", "equal"], ["temp", "temp", "equal"], ["<con>", "<con>", "equal"], ["Edges", "Edges", "equal"], [".", ".", "equal"], ["add", "add", "equal"], ["(", "(", "equal"], ["new", "new", "equal"], ["Default", "Default", "equal"], ["<con>", "<con>", "equal"], ["Topology", "Topology", "equal"], ["<con>", "<con>", "equal"], ["Edge", "Edge", "equal"], ["(", "(", "equal"], ["D1", "D1", "equal"], [",", ",", "equal"], ["D2", "D2", "equal"], [",", ",", "equal"], ["link1", "link1", "equal"], [")", ")", "equal"], [")", ")", "equal"], [";", ";", "equal"], ["temp", "temp", "equal"], ["<con>", "<con>", "equal"], ["Edges", "Edges", "equal"], [".", ".", "equal"], ["add", "add", "equal"], ["(", "(", "equal"], ["new", "new", "equal"], ["Default", "Default", "equal"], ["<con>", "<con>", "equal"], ["Topology", "Topology", "equal"], ["<con>", "<con>", "equal"], ["Edge", "Edge", "equal"], ["(", "(", "equal"], ["D2", "D2", "equal"], [",", ",", "equal"], ["D4", "D4", "equal"], [",", ",", "equal"], ["link2", "link2", "equal"], [")", ")", "equal"], [")", ")", "equal"], [";", ";", "equal"], ["Set", "Set", "equal"], ["<", "<", "equal"], ["Topology", "Topology", "equal"], ["<con>", "<con>", "equal"], ["Vertex", "Vertex", "equal"], [">", ">", "equal"], ["temp", "temp", "equal"], ["<con>", "<con>", "equal"], ["Vertexes", "Vertexes", "equal"], ["=", "=", "equal"], ["new", "new", "equal"], ["Hash", "Hash", "equal"], ["<con>", "<con>", "equal"], ["Set", "Set", "equal"], ["<", "<", "equal"], [">", ">", "equal"], ["(", "(", "equal"], [")", ")", "equal"], [";", ";", "equal"], ["temp", "temp", "equal"], ["<con>", "<con>", "equal"], ["Vertexes", "Vertexes", "equal"], [".", ".", "equal"], ["add", "add", "equal"], ["(", "(", "equal"], ["D2", "D2", "equal"], [")", ")", "equal"], [";", ";", "equal"], ["topology", "topology", "equal"], ["<con>", "<con>", "equal"], ["Service", "Service", "equal"], [".", ".", "equal"], ["change", "change", "equal"], ["<con>", "<con>", "equal"], ["In", "In", "equal"], ["<con>", "<con>", "equal"], ["Topology", "Topology", "equal"], ["(", "(", "equal"], ["get", "get", "equal"], ["<con>", "<con>", "equal"], ["Graph", "Graph", "equal"], ["(", "(", "equal"], ["temp", "temp", "equal"], ["<con>", "<con>", "equal"], ["Vertexes", "Vertexes", "equal"], [",", ",", "equal"], ["temp", "temp", "equal"], ["<con>", "<con>", "equal"], ["Edges", "Edges", "equal"], [")", ")", "equal"], [")", ")", "equal"], [";", ";", "equal"], ["listener", "listener", "equal"], [".", ".", "equal"], ["event", "event", "equal"], ["(", "(", "equal"], ["event", "event", "equal"], [")", ")", "equal"], [";", ";", "equal"], ["List", "List", "equal"], ["<", "<", "equal"], ["Link", "Link", "equal"], [">", ">", "equal"], ["links", "links", "equal"], ["=", "=", "equal"], ["new", "new", "equal"], ["Linked", "Linked", "equal"], ["<con>", "<con>", "equal"], ["List", "List", "equal"], ["<", "<", "equal"], [">", ">", "equal"], ["(", "(", "equal"], [")", ")", "equal"], [";", ";", "equal"], ["links", "links", "equal"], [".", ".", "equal"], ["add", "add", "equal"], ["(", "(", "equal"], ["link3", "link3", "equal"], [")", ")", "equal"], [";", ";", "equal"], ["links", "links", "equal"], [".", ".", "equal"], ["add", "add", "equal"], ["(", "(", "equal"], ["link4", "link4", "equal"], [")", ")", "equal"], [";", ";", "equal"], ["Path", "Path", "equal"], ["path", "path", "equal"], ["=", "=", "equal"], ["tunnel", "tunnel", "equal"], ["<con>", "<con>", "equal"], ["Service", "Service", "equal"], [".", ".", "equal"], ["query", "query", "equal"], ["<con>", "<con>", "equal"], ["All", "All", "equal"], ["<con>", "<con>", "equal"], ["Tunnels", "Tunnels", "equal"], ["(", "(", "equal"], [")", ")", "equal"], [".", ".", "equal"], ["iterator", "iterator", "equal"], ["(", "(", "equal"], [")", ")", "equal"], [".", ".", "equal"], ["next", "next", "equal"], ["(", "(", "equal"], [")", ")", "equal"], [".", ".", "equal"], ["path", "path", "equal"], ["(", "(", "equal"], [")", ")", "equal"], [";", ";", "equal"], ["assert", "assert", "equal"], ["<con>", "<con>", "equal"], ["That", "That", "equal"], ["(", "(", "equal"], ["path", "path", "equal"], [".", ".", "equal"], ["links", "links", "equal"], ["(", "(", "equal"], [")", ")", "equal"], [",", ",", "equal"], ["is", "is", "equal"], ["(", "(", "equal"], ["links", "links", "equal"], [")", ")", "equal"], [")", ")", "equal"], [";", ";", "equal"], ["assert", "assert", "equal"], ["<con>", "<con>", "equal"], ["That", "That", "equal"], ["(", "(", "equal"], ["path", "path", "equal"], [".", ".", "equal"], ["cost", "weight", "replace"], ["(", "(", "equal"], [")", ")", "equal"], [",", ",", "equal"], ["is", "is", "equal"], ["(", "(", "equal"], ["(", "Scalar", "replace"], ["", "<con>", "insert"], ["", "Weight", "insert"], ["double", ".", "replace"], [")", "to", "replace"], ["", "<con>", "insert"], ["", "Weight", "insert"], ["180", "(", "replace"], ["", "180.0", "insert"], ["", ")", "insert"], [")", ")", "equal"], [")", ")", "equal"], [";", ";", "equal"], ["}", "}", "equal"]], "src_desc_tokens": ["Tests", "resilency", "when", "D2", "device", "availability", "is", "changed", "<con>", "."], "dst_desc_tokens": ["Tests", "resiliency", "when", "D2", "device", "availability", "is", "changed", "<con>", "."], "label": true}
'''



def detect_sentence_clone(json_obj: dict, sentence_clone_type: SentenceCloneType):
    src_desc = json_obj["src_desc"]
    dst_desc = json_obj["dst_desc"]


    # original_clone_type = json_obj["clone_type"]

    # if original_clone_type :
    # if json_obj.has_key("clone_type"):
    if False:
        return False
    else:
        is_clone = False
        if sentence_clone_type == SentenceCloneType.TEXTUAL:
            is_clone = detect_textual_clone_for_sentence(src_desc, dst_desc)
            # if is_clone:
            #     json_obj["clone_type"] = SentenceCloneType.TEXTUAL.value # 1
        elif sentence_clone_type == SentenceCloneType.LEXICAL:
            is_clone = detect_lexical_clone_for_sentence(src_desc, dst_desc)
            # if is_clone:
            #     json_obj["clone_type"] = SentenceCloneType.LEXICAL.value # 2
        elif sentence_clone_type == SentenceCloneType.SYNTACTIC:
            is_clone = detect_syntactic_clone_for_sentence(src_desc, dst_desc)
            # if is_clone:
            #     json_obj["clone_type"] = SentenceCloneType.SYNTACTIC.value # 3
        elif sentence_clone_type == SentenceCloneType.SEMANTIC:
            is_clone = detect_semantic_clone_for_sentence(src_desc, dst_desc)
            # if is_clone:
            #     json_obj["clone_type"] = SentenceCloneType.SEMANTIC.value # 4
    return is_clone



def detect_textual_clone_for_sentence(sentence1: str, sentence2: str) -> bool:
    return detect_textual_clones(sentence1, sentence2)


def detect_lexical_clone_for_sentence(sentence1: str, sentence2: str) -> bool:
    return detect_lexical_clones(sentence1, sentence2)


def detect_syntactic_clone_for_sentence(sentence1: str, sentence2: str) -> bool:
    return detect_syntactic_clones(sentence1, sentence2)
    # return True


def detect_semantic_clone_for_sentence(sentence1: str, sentence2: str) -> bool:
    '''
    Use 'bert-base-uncased' model
    :param sentence1:
    :param sentence2:
    :return:
    '''
    # return detect_semantic_clones(sentence1, sentence2)
    return True